

★images asset strategy:
  *requirments:
    •small size (choice right format & optimize)
    •few http requests (sprite)
    •avoid unnessassery downloads(use attributs srcset & sizes)
    •Delivering high-quality images to high-density displays


  *strategy: if we need images, we need best decisions:
if(simple illustration can made by css) {
  pros: -size & rwd & quality;
  links:
    https://css-tricks.com/the-shapes-of-css/
    https://codepen.io/collection/kFeDz
  1_embeded <style>: -http request, but uncached;
  2_external.css: cached, but +http request;
  
}else if(complex illustration can made by svg) {
  pros: -size & rwd & quality;
  if(svg need be styled & scripted) {
    1_well-organized & labeled then optimized & placed inline <svg>: -http request, but uncached;
    2_embedded by <object data=''>: cached & dynamic, but +http request & unstyled by external.css;
  }else {
    1_optimized & placed inline <svg>: -http request, but uncached;
    1_optimized & embedded by <img>|<picture>|<object>: cached, but +http request;
  }
  
}else if(must be responsive image) {
  if(have a lot of images) {
    build web applucation on server-side: to automatic creates & optimize multi sizes(.5x ~ 4x) of original images on fly;
    link:
      https://www.npmjs.com/package/gulp-responsive
      https://glide.thephpleague.com/
      https://cloudfour.com/thinks/image-resizing-services/
  }else {
    manually: choise best bitmapped format & use tools to create & optimize multi sizes(.5x ~ 4x) of original images;
  }
  
}else {
  if(have a lot of images) {
    build web applucation on server-side: to automatic optimize images on fly;
  }else {
    manually: choise best bitmapped format & optimize;
  }
}


