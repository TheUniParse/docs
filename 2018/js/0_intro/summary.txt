

★basic concepts:
  *java script have no relation to java, its original name: live-script.
  *place into document: in head or just before </body> elements.
    •can be embedded into <script>…</script> element, 
    •or refer by src attribute to external file.js <secript src='path/file.js'>//do not type scripts here !!</script>



★variables:
  *syntax:
    var vName; //declaration
    var vName = value; //declaration & initialization
    vName = newValue; //update|initialize
    
  *var keyword: declare one variable, or several separated by commas
    •ex: var var1=val1, var2=val2, var3=val3, …;
    
  *scope:
    •outside function: available to all scripts & all functions
      var global=value; // preceded by var
    •inside function: 
      »locally scoped: available just for its parent function
        ›var local=value; // preceded by var
      »globally scoped: available to all scripts & others functions, just after #CALL the function, else{undefined}
        ›global=value; // ommited the var
        ›Worning: unexpected errors can happend
          function a(v){
            g = v + v; // globally scoped
            var l = v + v + v; //locally scoped
            alert('function code block run !!');
            return l;
          }
          var g = 10; // g=10
          var G = a(20); 
          // a(20) run all the code block, before stop & returned variable l,so g = 20 + 20 = 40
          alert(g); // Alerts 40.
        ›solution: 
          _avoid globally scoped variables Inside functions, 
          _or use IIFE'Immediately Invoked Functional Expression' (…()); to isolation the function and its code bloke, but it will run immediately & can'not recalled
            (function(){//not sure if global|local scope}());
            
  *name:
    •case-sensitive
    •do not contain special character (*-+=&$#@!.,><;:'"\|/?…)
      _do not contain space character(insted use camle-case)
    •star with letter|underscape (not number)
    
  *equal = operator: assine value
  
  *semiColon ; symbol: end command
  
  *value:
    »data types: 
      •undefined, is the default value if we did not initialized the variable after declaring it.
      •null: Define this variable, but give it no inherent value
      •number: can calculated by +plus -minus *multiply /divide operators.
      •string: 
        ›enclosed by single|double quotes, 
        ›concat'enation '+' operator combine two-strings|string+number to one string.
        ›escape: \\, \', \", \n(new line), \t(tab), \r(carriage return), \f(form feed), \b(word boundary)
      •booleans: true = !false | false = !true ==0==null==""==undifined
    »array:
      •are members of ordered data values
      •indexed frome 0, separated by commas, surrounded by square brakets[]
      •can use|call|refer just indexed value
        var arr = [5, 'five', '5'];
        var five = arr[1]; // five = 'five';
      •we can calculate number of values by .length:
        var arr = [v1, v2, …, v?];
        var members = arr.length; //if v? → 500'th, members=501
    »function():
      •Worning: when declare & assign function to variable, it will automaticly run(without calling it)
      •if the function contain 'return keyword':
        ›it will run until return stop it
        ›then as addition, it will represented by rhe returned value.
      •if the function do not contain 'return keyword':
        ›it will run all the code block
        ›then as addition, it will represented by the value: undefined.
     


★operators: 
  *comparison operators: 'putted in statment like if(){}'
    •equality: (5 == '5') is true
    •inequality: (5 != '4') is true
    •identically: (5 === '5') is false, data type number≠string
    •nonidentical: (5 !== '5') is true
    •greater than: (5 > 4) is true, (5 > 5) is false
    •greater than or equal: (5 >= 4) | (5 >= 5) is true
    •less than: (5 < 6) is true
    •less than or equal: (5 <= 6) | (5 <= 5) is true
    
  *mathematical operators: only numeric data values|variables
    •add: var a=b+3
    •addition: var a+=b; a=a+b;
    •increment: var a++; a=a+1;
    •subtract: var a=b-3;
    •subtraction: var a-=b; a=a-b;
    •decrement: var a--; a=a-1;
    •multiply: var a=b*3;
    •multiplication: var a*=b; a=a*b;
    •divide: var a=b/3
    •division:var a/=b; a=a/b;



★if statement condition:
  *structure: 
    if(the first condition met){
      //then execute this block
    }else if(the second condition met {
      //then execute this block
    }else if(the third condition met){
      // then execute this block
    }else if(…){
      //…
    }else{
      //if no condition met, then run|execute this last block
    }
  *condition: (compatios operator): (==,!=,===,!==,>,>=,<,<=)
  *block: commands or console logs or …



★loop:
  *for:
    •structure:
      for(declare & initialize variable; condition; operator){
        //do this
      }
      ›ex:
        for(var i=0; i < array.length; i++){
          //run this …array[i]…
        }
    •nested functions: 
      by defualt functions iside 'for loop' treats variables globaly, not temporary in each step of loop, the solotion is:
      (function(i) {
        return function() { 
          //can use temporary: i
        };
      })(i);
    •benefits: 
      ›we can applay styles to list of elements.
      ›add|remove|change attributes to each element from long list(like inputes).
      ›creat arrays to build folters of search element & …
      
  *while: //we have also while(){} loop, but this book do not discussed it.



★function:
  *types:
    •native functions: (predefined)
      »dyalog box:
        ›alter('message'); //answer: ok
        ›confirm('question?'); //answer: ok|cancel
        ›prompt(); //answer: input, ok
      »return value:
        ›Date(); //not date(), return date, time, day, gmt
        ›parseInt('123'); // convert numbers from string('123') → number(123) data type.
        ›setTimeout(fName, 5000); // run function by delay(ms), without including parentheses & arguments, i dont know why !!!
        ›…
    •custome function syntax: 
      function fName(placeholder_arguments){
        //code block
        return value;
        //ignored code block because return called.
      }
      fName(input_arguments); //call the function'
      
  *function keyeord: declare new function
    •declaration a function, do not call it !!
    •to run it, we need to Call it !!
    
  *scope:
    •globally scoped: 
      function(){};
    •temporary scoped: 
      (function(){})();
      
  *name: as variable rules
  
  *argumets: 
    •placeholder variables lives just in the current function,
    •can be ommited, just one value(data|array), several values(data) separated by commas.
    
  *code block: can contain variables, loops, another functions,?
  
  *return keyword:
    •tell the function: stop executing code block now, so any code came after return keyword will be ignored.
    •give the fonction ability to be a variable with dynamic value (can be customized by arguments).
    •if we did not add return keyword, the function will return 'undefined' value by default.



★add behavior to document:
  *syntax:
    •as html attribute:(avoid it)
      <el onevent='listener()'>…</el>
    •as method attached to element:(avoid it)
      object.onevent = listener;
    •as listener:
      object.addEventListener('event', listener, true|false, option)
      
  *object: (eventTarget)
    •we can access elements throught DOM object: document
      ›and browser window through the object: window
    •we can target specific elements inside the root html by: 5 queries:
      »document.getElementById('id');// one element
      »document.getElementsByTagName('h2');// 1|collection
      »document.getElementsByClassName('box red');//1|collection
      »document.querySelector('ul#nav li.fb');// 1|collection
      »document.querySelectorAll('nav a', 'li>a');//1|collection
    •Note: we can'not access collection of elements at ones, insted we can access it by index:
      var selector = document.querySelector('ul#nav li.fb');
      var selectors = document.querySelectorAll('img', 'svg');
      selector.addEventListener('event', eventHandler);
      function loop(array){
        for(var i=0; i<array.length; i++){
          array[i].addEventListener('event', eventHandler);
        }
      }
      loop(selectors); //loop(classes); loop(tags);
      
  *on|event:
    •window events:
      »general: 
        ›on| focus, blur, load, beforeunload, unload, error, pagehide, pageshow, resize, copy, cut, paste, offline, online, hashchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
        ›just|DOMContentLoaded, devicemotion, deviceorientation
      »desktop:
        ›on|mousemove, mouseovee, mouseout
      »mobile://
    •document events:
      »general:
        ›on|click, dblclick, scroll, input, change, visibilitychange, copy, cut, paste, selectstart, selectionchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
      »desktop:
        ›on|wheel, drag, dragend, dragenter, dragleave, dragover, drop, fullscreenchange, fullscreenerror, keyup, keydown, keypress(removed), 
        ›just|DOMContentLoaded, readystatechange, 
      »mobile:
        ›on|touchend, touchcancel, touchmove, touchstart, 
        
  *listener(eventHandler):
    •call one function: 
      functionName
    •call multi functions: 
      ()=>{func1(arguments); func2(); …}
    •run anonymous function: 
      function(){//…}
     ›temporary scope:
       (function(){//…})()
        
  *listener true|false: run|stop the function|s
  
  *listener options: {opt1,opt1, …}
    •once: true|false // if true, then it will run the eventHandler, then call: object.removeEventListener()
    •capture: true|false // ??
    •passive: true|false // ??
















