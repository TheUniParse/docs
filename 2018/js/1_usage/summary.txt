


★DOM: (document pbject module)
  *introduction:
    •DOM is programing language translate html|xml|…? to map can be accessed by java-script|ruby|c++|…?.
    •in our html, DOM give us map as tree of "node's", wich node can be 'element, attribute, text'
    
    
  *accessing DOM elements nodes:
    •demo:
      var nodeList = document
        .method('el-selector')
        .property;
        
    •accessing methods: (return array|colloction|nodeList of elements, except Id method)
      »demo:
        var nav = document.getElementById('navigation');
        var links = nav.getElementByTagName('a')
          .getElementByClassName('main');
        var sameLinks = document
          .querySelectorAll('#navigation a.main');
        var jQueryLinks = $('#navigation a.main');
      
      »ready: 
        document.title
        document.body
          
      »useless:
        .getElement ById('idName') // return just 1 element
        .getElement s ByClassName('c1 c2 …')//els share same c's
        .getElement s ByTagName('tag')
        .querySelector('cssSelector')
      »usefull:
        .querySelectorAll('cssSselector1, selector2, …')
        
    •manipulate methods:
      »demo:
        document
          .getElementById("main") 
          .appendChild(
            document.createElement("p") 
            .appendChild(
              documentCreateTextNode("Hey, I'm walking here!")
            )
          );
      »methods:
      .createElement('tag') //saved in memory until we add it
      .createTextNode('text') //saved in memory until we add it
      .appendChild(node) 
        ›move node to parent, as last-child, 
        ›we can'not move node to two parents in document, 
        ›if we append the child from first parent to second parent, then the node will be omitted from previos apended position.
        ›ex:
         div[0].appendChild(createdEl).appendChild(createdTxt);
         div[1].appendChild(createdEl).appendChild(createdTxt);
         // now nods moved from div[0] to div[1]
      .insertBefore(newNode, previosChild)
        ›as previos move node to parent, before existing child.
        ›ex:
         div[0].insertBefore(newH2, div_p[3]).appendChild(text);
      .insertAfter(newNode, previosNode)
      .before(node1, node2, …) // p.before(h1, hr)
      .after(node1, …) // h1.after(hr, p)
      node.cloneNode(true|false) 
        ›copy node|(+its attr, text)
        ›sync issue with .before|.after|.insertBefore|.insertAfter|.replaceChild
        ›ex:
         newEl.appendChild(subNode)
         var copy = newEl.cloneNode(true);
         // now copy have both newEl & its deep|sub tree nodes.
      .replaceChild(newNode, oreviosNode)
        ›ex:
          div[0].replaceChild(newText, paragraph[0]);
      .removeChild(node)
        ›ex:
          div[0].removeChild(paragraph[1]);
    
    •properties:
      .innerHTML // = 'html markup'
        ›ex:
         div[0].innerHTML = '<p id=intro>Hi &amp; Welcome!</p>';
      .innerText // = 'html output'
        ›ex:
          paragraph[0].innerText = 'Hi & Welcome!';
      .style.<cssProperty> 
        // hyphen-property(in css) → camelCaseProperty(in js)
        ›ex:
          var bgColor = document.body
            .style.backgroundColor;// save reference
          bgColor = 'hsla(90,100%,50%,.34)';// update
          
          
  *accessing & manipulating DOM attriputes nodes:
    •demo:
      var el = document.querySelectorAll('cssSelector', …);
      var attr = el[index].accessingMethod();// save
      el.manipulateMethod();// update
    
    •accessing method:
      .getAttribute('attr')
    
    •manipulate methods:
      .setAttribute('attr', 'value')
      .
      .
