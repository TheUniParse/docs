‚ñ∂‚ñ∫‚óÑ‚ñ≤‚ñº‚òÖ‚ô•‚ñ¨‚Ä¢¬ª‚Ä∫‚ö†Ô∏èüí°¬±√ó√∑¬≤‚àöœÄ‚Å∞‚â†‚âà‚â§‚â•√ò‚àû‚úì‚úó‚úñ ‚Ç¨ ‚Üê ‚Üí ‚Üë ‚Üì ‚áÜ‚ô™¬©‚íπ„äø‚Ä†‚Ç±‚Ä¶
‚òÖadd behavior to document:
  *syntax:
    ‚Ä¢as html attribute:(avoid it)
      <el onevent='listener()'>‚Ä¶</el>
    ‚Ä¢as method attached to element:(avoid it)
      object.onevent = listener;
    ‚Ä¢as listener:
      object.addEventListener('event', listener, true|false, option)
  *object: (eventTarget)
    ‚Ä¢we can access elements throught DOM object: document
      ‚Ä∫and browser window through the object: window
    ‚Ä¢we can target specific elements inside the root html by: 5 queries:
      ¬ªdocument.getElementById('id');// one element
      ¬ªdocument.getElementsByTagName('h2');// 1|collection
      ¬ªdocument.getElementsByClassName('box red');//1|collection
      ¬ªdocument.querySelector('ul#nav li.fb');// 1|collection
      ¬ªdocument.querySelectorAll('s1, ‚Ä¶', ‚Ä¶);//collection
    ‚Ä¢Note: we can'not access collection of elements at ones, insted we can access it by index:
      let selector = document.querySelector('ul#nav li.fb');
      let selectors = document.querySelectorAll('img', 'svg');
      selector.addEventListener('event', eventHandler);
      function loop(array){
        for(let i=0; i<array.length; i++){
          array[i].addEventListener('event', eventHandler);
        }
      }
      loop(selectors); //loop(classes); loop(tags);
  *on|event:
    ‚Ä¢window events:
      ¬ªgeneral: 
        ‚Ä∫on| focus, blur, load, beforeunload, unload, error, pagehide, pageshow, resize, copy, cut, paste, offline, online, hashchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
        ‚Ä∫just|DOMContentLoaded, devicemotion, deviceorientation
      ¬ªdesktop:
        ‚Ä∫on|mousemove, mouseovee, mouseout
      ¬ªmobile://
    ‚Ä¢document events:
      ¬ªgeneral:
        ‚Ä∫on|click, dblclick, scroll, input, change, visibilitychange, copy, cut, paste, selectstart, selectionchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
      ¬ªdesktop:
        ‚Ä∫on|wheel, drag, dragend, dragenter, dragleave, dragover, drop, fullscreenchange, fullscreenerror, keyup, keydown, keypress(removed), 
        ‚Ä∫just|DOMContentLoaded, readystatechange, 
      ¬ªmobile:
        ‚Ä∫on|touchend, touchcancel, touchmove, touchstart, 
  *listener(eventHandler):
    ‚Ä¢call one function: 
      functionName
    ‚Ä¢call multi functions: 
      ()=>{func1(arguments); func2(); ‚Ä¶}
    ‚Ä¢run anonymous function: 
      function(){//‚Ä¶}
     ‚Ä∫temporary scope:
       (function(){//‚Ä¶})()
  *listener true|false: run|stop the function|s
  *listener options: {opt1,opt1, ‚Ä¶}
    ‚Ä¢once: true|false // if true, then it will run the eventHandler, then call: object.removeEventListener()
    ‚Ä¢capture: true|false // ??
    ‚Ä¢passive: true|false // ??
‚òÖDOM: (document pbject module)
  *introduction:
    ‚Ä¢DOM is programing language translate html|xml|‚Ä¶? to map can be accessed by java-script|ruby|c++|‚Ä¶?.
    ‚Ä¢in our html, DOM give us map as tree of "node's", wich node can be 'element, attribute, text'
  *accessing DOM elements nodes:
    ‚Ä¢demo:
      let nodeList = document
        .method('el-selector')
        .property;
    ‚Ä¢accessing methods: (return array|colloction|nodeList of elements, except Id method)
      ¬ªdemo:
        let nav = document.getElementById('navigation');
        let links = nav.getElementByTagName('a')
          .getElementByClassName('main');
        let sameLinks = document
          .querySelectorAll('#navigation a.main');
        let jQueryLinks = $('#navigation a.main');
      ¬ªready: 
        document.title
        document.body
      ¬ªuseless:
        .getElement ById('idName') // return just 1 element
        .getElement s ByClassName('c1 c2 ‚Ä¶')//els share same c's
        .getElement s ByTagName('tag')
        .querySelector('selector')
      ¬ªusefull:
        .querySelectorAll('s1, ‚Ä¶', ‚Ä¶)
    ‚Ä¢manipulate methods:
      ¬ªdemo:
        document
          .getElementById("main") 
          .appendChild(
            document.createElement("p") 
            .appendChild(
              documentCreateTextNode("Hey, I'm walking here!")
            )
          );
      ¬ªmethods:
      .createElement('tag') //saved in memory until we add it
      .createTextNode('text') //saved in memory until we add it
      .appendChild(node) 
        ‚Ä∫move node to parent, as last-child, 
        ‚Ä∫we can'not move node to two parents in document, 
        ‚Ä∫if we append the child from first parent to second parent, then the node will be omitted from previos apended position.
        ‚Ä∫ex:
         div[0].appendChild(createdEl).appendChild(createdTxt);
         div[1].appendChild(createdEl).appendChild(createdTxt);
         // now nods moved from div[0] to div[1]
      .insertBefore(newNode, previosChild)
        ‚Ä∫as previos move node to parent, before existing child.
        ‚Ä∫ex:
         div[0].insertBefore(newH2, div_p[3]).appendChild(text);
      .insertAfter(newNode, previosNode)
      .before(node1, node2, ‚Ä¶) // p.before(h1, hr)
      .after(node1, ‚Ä¶) // h1.after(hr, p)
      node.cloneNode(true|false) 
        ‚Ä∫copy node|(+its attr, text)
        ‚Ä∫sync issue with .before|.after|.insertBefore|.insertAfter|.replaceChild
        ‚Ä∫ex:
         newEl.appendChild(subNode)
         let copy = newEl.cloneNode(true);
         // now copy have both newEl & its deep|sub tree nodes.
      .replaceChild(newNode, oreviosNode)
        ‚Ä∫ex:
          div[0].replaceChild(newText, paragraph[0]);
      .removeChild(node)
        ‚Ä∫ex:
          div[0].removeChild(paragraph[1]);
    ‚Ä¢properties:
      .innerHTML // = 'html markup'
        ‚Ä∫ex:
         div[0].innerHTML = '<p id=intro>Hi &amp; Welcome!</p>';
      .innerText // = 'html output'
        ‚Ä∫ex:
          paragraph[0].innerText = 'Hi & Welcome!';
      .style.<cssProperty> 
        // hyphen-property(in css) ‚Üí camelCaseProperty(in js)
        ‚Ä∫ex:
          let bgColor = document.body
            .style.backgroundColor;// save reference
          bgColor = 'hsla(90,100%,50%,.34)';// update
  *accessing & manipulating DOM attriputes nodes:
    ‚Ä¢demo:
      let el = document.querySelectorAll('cssSelector', ‚Ä¶);
      let attr = el[index].accessingMethod();// save
      el.manipulateMethod();// update
    ‚Ä¢accessing method:
      .getAttribute('attr')
    ‚Ä¢manipulate methods:
      .setAttribute('attr', 'value')
      .
      .

‚ñ¨‚ñ¨‚ñ¨2022‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
‚ñ∂‚ñ∫‚óÑ‚ñ≤‚ñº‚òÖ‚ô•‚ñ¨‚Ä¢¬ª‚Ä∫‚ö†Ô∏èüí°¬±√ó√∑¬≤‚àöœÄ‚Å∞‚â†‚âà‚â§‚â•√ò‚àû‚úì‚úó‚úñ ‚Ç¨ ‚Üê ‚Üí ‚Üë ‚Üì ‚áÜ‚ô™¬©‚íπ„äø‚Ä†‚Ç±‚Ä¶
‚òÖconsepts: its riginal name was live-script ‚â†java.
  ‚ñ∫place into document: in <head> or just before </body>.
    ‚Ä¢embedded: <script>‚Ä¶</script>
    ‚Ä¢external: <secript src=path/file.js>/*√ò*/</script>
  ‚ñ∫loading: <script> pause HTML-parse until (fetch & execute).
   <s defer*src> parallel(fetch,parse), execute after parse-End
   <s async*src> parallel(fetch,parse), pauseParse until execute
‚òÖdata types:
  ‚ñ∫literal:
    ‚ñ¨undefned‚íπ if var declared without initialized.
    ‚ñ¨null: Define this var, but give it no inherent value
    ‚ñ¨boolean: true !false anyVal|false !true NaN''null0undifined
    ‚ñ¨number: ‚Ä¢integer: ¬±#‚â†.0 ‚Ä¢decimal'float: ¬±#.f ‚Ä¢double
    ‚ñ¨string: ‚Ä¢sequence of characters quoted by `|'|"
      ‚Ä¢+|+=operator concat str+str|str+number //string.
      ‚Ä¢backTick template: `str${<expression>str}` preserve WS
      ‚Ä¢\escape just before: \\ \' \" \n?u{a}=newLine \t?u{9}=tab \r?u{d}=carriageReturn \f?u{c}=formFeed \b?u{8}=backSpace \v?u{b}=lineTabulation
        ‚Ä∫\uHHHH \u{H~HHHHHH} \xHH
    ‚ñ¨array: [√ò|item,‚Ä¶?]
      ‚Ä¢items are members of ordered data(even[]&{}) comma separated surrounded by brackets[], indexed from 0
      ‚Ä¢accessed only by index arr[#].
    ‚ñ¨object: {√ò|property:value,method:function(){},‚Ä¶?}
  ‚ñ∫‚â†literal: varName|func()|(n?operator)
    ‚ñ¨func(): ‚Ä¢Worning: if assigned‚Üívar, start runing immediately
      ‚Ä¢if contain return: run until return, store returned data.
      ‚Ä¢if return omitted: run all the block, store undefined.
‚òÖoperators: order: *%/,+-,<=>,== !=
  ‚ñ∫numeric:+add -subtract *multiplay /divid %reminder **exponent
    ‚Ä¢increment++ decrement-- by 1.
    ‚Ä¢assignment: varName =|+=|-=|*=|/=|%=|**=|‚Ä¶ value
  ‚ñ∫comparison'bool:===identical'val&type ==equality !== != <=>'#
  ‚ñ∫logical:
    ‚ñ¨!exp//oppsite-boolean notT=F notF=T !0=T !NaN=T !1=F ‚Ä¶
    ‚ñ¨exp&&exp//TandT=true,false ‚ñ¨exp||exp//ForF=false,true
  ‚ñ∫string: +|+=concatecation str+str?n//string
‚òÖbuld-in properties and methods: (everything are object)
  ‚ñ¨object:
    obj.property //value of property
    obj.method() //call function() of method
  ‚ñ∫native functions: window.func()
    ‚ñ¨dialog box(show message): ‚Ä¢prompt(req)//[input],(ok)submit
      ‚Ä¢alert(m)//(ok) ‚Ä¢confirm(question)//(ok)true|(cancle)false
    ‚ñ¨return val: ‚Ä¢Date()//date time day GMT
      ‚Ä¢setTimeout(funcName, #'ms) //delay calling funcName()
  ‚ñ∫literal
    ‚ñ¨number:
      n.toFixed(+#) // round n.10^#
      (#).toString() //'#'
    ‚ñ¨string:
      str[i]//character nth i+1
      str.length//#
      Number(√ò?''|'#'|'‚â†#')//0|#|NaN
      parseInt('#'|√ò?''?'‚â†#')//#|NaN
      str.includes?startsWith?endsWith(subStr)//boolean
      str.indexOf(subStr, from=0)//#,-1
      str.slice(start=0,end=str.length)//str‚íπ,'str[s]‚Ä¶str[e-1]'
      str.toLowerCase?toUpperCase()//string
      str.replace?replaceAll(subStr,newSubStr)//string
      str.split(separator,limit?)//[array]
        'a/b/c'.split('/',2) //['a','b']
    ‚ñ¨array:
      arr[i][i] //item nth i+1 of nested arr nth i+1
      arr.indexOf(item)//+#,-1
      arr.push(i,‚Ä¶?)//#(arr.length + [i,‚Ä¶?].length), add‚Üíend.
      arr.unshift(i,‚Ä¶?)//#(new.length), add‚Üístart.
      [‚Ä¶,last].pop()//last, remove last item.
      [first,‚Ä¶].shift()//first, remove first item.
      arr.splice(start=0,count)//[]‚íπ,[arr[s],‚Ä¶],remove [arr[s]‚Ä¶]
      arr.map(fN) //({ newArr:[], m:function(){
          for (const i of arr){this.newArr.push(fN(i))}
          return this.newArr} }).m()
        function x2(i){return i*2}; [1,3,5].map(x2) //[2,6,10]
      arr.filter(fN'condition)//[matchedItems‚Ä¶]
        //({ newArr:[], m:function(){
          for (const i of arr){if(fN(i)){this.newArr.push(i)}}
          return this.newArr} }).m()
        [0,'1',2,'3'].filter(i=>typeof(i)=='number') //[0,2]
        ['ccc','a','bb'].filter(i=>i.length>=2) //['ccc','bb']
      arr.toString() //'arr[0],‚Ä¶,arr[arr.length-1]'
      arr.join(separator=',') //'arr[0],‚Ä¶,arr[arr.length-1]'
‚òÖstatements:
  ‚ñ∫??
    ‚ñ¨typeof <expression> //number|string|object
  ‚ñ∫variable: store reusabel data.
    ‚ñ¨dec&init: const?let name=value,‚Ä¶?;
     ‚Ä¢declaring: const?let name1,‚Ä¶?; ‚ñ¨initializing: name=update;
       ‚Ä∫let declare updatable var, const declare ‚â†updatable var.
       ‚Ä∫const array=[‚Ä¶],object={‚Ä¶}; //content ‚Ä¶ can be updated!.
    ‚ñ¨name: [‚â†0~9][a~Z 0~9 _]‚Ä¶?, case-sensitive, ‚â†js-statement.
    ‚ñ¨scope: ‚Ä¢topLvl: const?let golbal=v; //available everywhere
      ‚Ä¢in function:
        ‚Ä∫const?let local=v; //accessed only in this func.
        ‚Ä∫global=v; //call it will declare global var, undifined
          //issue: unexpected errors, fix: avoid this method.
      ‚Ä¢IIFE: Immediately Invoked Functional Expression
        (function(){local=v}()) //func isolation, local scope
  ‚ñ∫function name(arguments)
      { /*code block*/; return expression; /*ignored*/ }
      fName(input-args); //call the function
    ‚ñ¨scope: ‚Ä¢global: function(){};
      ‚Ä¢temporary: (function(){})();
    ‚ñ¨argumets: optional if arg=initialized, can be comma list
    ‚ñ¨block: can contain variables, loops, functions, ?
    ‚ñ¨return keyword:
      ‚Ä¢stop executing, & ignored below code.
      ‚Ä¢give the fonction ability to be a variable with dynamic value (can be customized by arguments).
      ‚Ä¢if 'return' omitted, return undefined
  ‚ñ∫flow control:
    ‚ñ¨if(condition1 met){ //execute block1
        }else if(condition2 met) { //execute block2
        }‚Ä¶else{ //execute last-block}
      ‚Ä¢condition: boolean|operator == != === !== <=>|method|func
        true !false anyVal|false !true NaN''null0undifined
      ‚Ä¢block can contain 'return', nest other if statement.
    ‚ñ¨switch(exp){
      case choice1: /*code1*/ break;
      case choice2: /*code2*/ break;‚Ä¶
      default: //code
    }
      ‚Ä¢
      ‚Ä¢
      ‚Ä¢
    ‚ñ¨for:
      for(dec&init,condition,operator){‚Ä¶}
        for (const i=0; i<arr.length; i++){//‚Ä¶arr[i]‚Ä¶}
      for(declare arg of arr){‚Ä¶}
        for (const i of arr){console.log(i)}
      ‚Ä¢scope issue: nested funcs treats vars globally, fix:
        (function(i){return function(){/*temporary vars*/} })(i)
      ‚Ä¢benefits: ‚Ä∫we can apply styles to list of elements.
        ‚Ä∫add|remove|change attributes to each element from long list(like inputes).
        ‚Ä∫creat arrays to build filters of search element & ‚Ä¶
    ‚ñ¨while(){}
‚òÖ
‚òÖ
‚òÖ
