★▶►▬•»›▲♥⚠️💡±×÷²√π⁰≠≈≤≥Ø∞✓✗✖ € ← → ↑ ↓ ⇆♪©Ⓓ㊿†₱…
★values:
  ▶global:                 /*w3-css initial: *{display:inline}*/
    body{font-size:13px}         /*UA-origin: p{display:block}*/
    p:nth-child(1){font-size: inherit}                  /*13px*/
    p:nth-child(2){font-size: initial}                  /*16px*/
    p:nth-child(3){all: unset} /*font-size:13px;display:inline*/
    p:nth-child(4){all: revert} /*font-size:13px;display:block*/
   •initial: set default w3-css value(≠UA-origin).
   •inherit: set closest ancestor #inheritable↓ value.
   •revert: set inherit, else UA-origin value, else initial.
   •unset: set inherit, else initial.
  ▶angle: 360deg'rees = 1turn = 400grad'ians = 2πrad'ians.
  ▶color: •currentcolorⒹ
    •rgb?a(r,g,b,a?|r g b/a?), hsl?a(h,s,l,a?|h s l/a?)
      ›r?g?b≤:100%?255?f, alpha≤:100%?1?f, hue:<angle>?≤360, saturate100Ⓓ?lightness50Ⓓ:≤100%
    •#rgb|a = #rrggbb|aa (#hexaDecimal #101010 ≠ #111 = #111111)
   ▬painting areas: (in body|html bg cover entir viewport)
    •foreground↓:textNode+ border+ text-decoration,currentColorⒹ
    •background≠↓:contentBox+padding+border ≠margin,transparentⒹ
  ▶length measurement: ▬absolute: •screen: pixel:px=in/(ppi≈96).
    •real: in?≈2.54cm, mm?=4q'quarter≠S19.
    •print: point:pt=in/(dpi≈72), pica:pc=12pt≈in/6.
   ▬relative: •rem=:root{font-size}, User can adjust it!!.
    •em=el{font-size}, just in typography em=.parent{font-size}.
      ›h1=2em h2=1.5em h3=1.2em h4=1em h5=.85em h6=.65em.
    •ex=el{x-height}, ch=el{0-width}
    •viewport: vw?vh?vmin?vmax.
      <meta name=viewport content='w=device-w, initial-scale=1'>
  ▶functions:
    ›can contain: ±#| length| %| <time:s?ms>| <angle>| nested min?max?calc?clamp()
    ›math operators:±v1 ± ±v2 ± ±v3…|±v*±#*±#…|±v/±#/±#…
    •calc(<math-operators>)//return result.
    •min?max(mo1, mo2, …)//smallest?largest unordered result
    •clamp(mo1,mo2,mo3)//middle<relativeLength> sum
      limited by min&max<absoluteLength> sum
    •var(--cp, <fallback>,…): store reused author value
      ›used only as property value
      »scope: ›globally: :root{--cp:v} ›locally: el{--cp:v}
      ›fallback list? returned if --custom-property invalid css.
    •env(variable,<fallback>,…) use UA value
      ›used as property|desciptor value, may used in selectors.
      ›scope: only globally
      »variables:
        ›safe-area-inset-<side>:if display≠rectangle:<length> else:0,<meta name=viewport content='viewport-fit=cover'>
        ›titlebar-area-x?y?width?height ≠F4S19s3: <l> if desktop install pwa(progressive web app) window-controls-overlay api, else 0.
      ›fallback list? returned if variable unavailable.
  ▶image: url()?image-set()?gradiant?cross-fade()?element()
   •url(''): relative to @rule file-holder .html|.css, or /root
    ›omitting quotes, required to \escape: whiteSpace () '"
   •image-set(<img>|'url' type('image/webp|…') #<resolotion>,…)
    ›-ms|moz|webkit-93%, 'url' fallback required.
    ›all support image:url() & resulotion:#x, exclude type()≠S19
   •cross-fade(url() #%,url() #%)≠F4//mix 2 imgs by opacity
   •linear-gradient(<angle>|to <s|c>, <color> <stop1~2>,c2 s2,…)
    ›side: top:0°|right:90°|bottomⒹ:±180°|left:-90°.
    ›corner: top right:45°| b r:135°| b l:-135°| t l:-45°.
    »stop: length|%(relative to imagined angle-directed #line)
      ›by defualt: first-stop=0, last-stop=100%.
      ›double-stop valid: x-gradient(<color1> s1 s2, c2 s1 s2,…)
   •radial-gradient(<endShape>? <size> at <position>, c1 s1, …)
    ›ending-shape'optional: circle|ellipseⒹ
    »size: hr vr(ellipse-radius)| length(circle_radius)| keyword
      ›horizontal|vertical-radius: length|%(r to bg-origin box)
      ›keyword:       (circle-end=°, ellipse-end=0)
        .closest-side: °meet closeBoxSide, 0meet close h+v sides
        .farthest-side: °meet farBoxSide, 0meet far h+v sides
        .closest-corner: °|0meet closest boxCorner to <position>
        .farthest-cornerⒹ: °|0meet farthestCorner to <position>
    »position: as bg-position, but applyTo center(not top left)
   •conic-gradient(from <angle> at <position>, <color> <stop>,…)
    ›stop: <angle>|%(relative to 360°)
   •repeating-<linear|radial|conic>-gradient()
    ›repeating entire color-stops list.
   •https://www.virtuosoft.eu/tools/css-gradient-generator/
      https://learnui.design/tools/gradient-generator.html
      https://angrytools.com/gradient/
★box areas: visibleBox(content + padding + border) ≠+ margins
★box measurenent: *≠apply→ unreplaced-i-els &:
  •width's(no tr|thead|tbody|tfoote) •height's(no: col|colgroup)
 *box-sizing: content-boxⒹ| border-box;
  html{bs: border-box} *,*::before,*::after{bs: inherit}
 *define box dimensions: •width?height: autoⒹ| length| %→box-sizing| min?max?fit-content(big-word?line?between);
 *limit box dimensions: (override w|h)
  •max-width?height: none(∞)d| length| %| min?max?fit-content;
  •min-width?height: autoⒹ| length0d| %| min?max?fit-content;
    ›auto: min-w≠S19, min-h≠S19F4, min-b?i-size0%(length0d)
 *support(fit-content): •width -moz|webkit- +5% (max-w partial)
  •min?max-|block?inline-size: -moz- +4%
  •max-w?h|h|max?min-block-size: noFirefox -4%
★box spaces: •padding|margin: all|v h|t h b|t r b l;
 *padding-<side>: length0d|%→parent; content-box⇆border
  •unapply to tr|thead|tbody|tfoot|col|colgroup
 *margin-<s>: ±length0d|±%→parent|auto; current⇆neighbor-border
  •unapply to el{display: inline-|table|-*(*≠caption)}.
  •behavior: ›neighbor block-els v-margin collapse to biggest, negative margins overlap neighbors into it.
★box layout: *direction: ltrⒹ|rtl;
 *writing-mode:horizontal-tbⒹ(lines↓)|↓vertical-lr|↓vertical-rl
  ›unapply to tr|thead|tbody|tfoot|col|colgroup
  •text-orientation(vertical only): mixedⒹ| upright(separately)
  ►logical properties & values: rel → writing-mode, direction
    •text-align: startⒹ?end| left?r?center?justify|match-parent
    •float?clear: inline-s?e=F4| noneⒹ?left?right|both→clear
    ▬inset(as top|r|b|l): <all|b i|bs i be|bs ie be is>
      {inline?block: <both|s e> {start?end: autoⒹ?length?%}}
    ▬max?min-|inline?block-size: <max?min-|w?h>
    ▬padding?margin:{i?b:<both|s e> {s?e: length?%|auto→margin}}
    ▬border: {s?e'i-s?e'b-radius: <both|h v:length?%1~2>}
      {i?b: <both:s?w?c1~3> {style?width?color:<both|s e>}
        {s?e: <s?w?c1~3> {style?width?color: <s|w|c>}} }
 *block-lvl els: •normal-flow perdencular †o writing-mode.
  •inline-size: 100%; margin-t?b: initial; (start&end with <br>)
  •can contain block&inline-lvl els.
 *inline els: •normal-flow para//el to writing-mode.
  •generates next to etch other without white-space.
  •invalid to contain block-lvl els, even if {display:block}.
  1•unReplaced-i els: ›have content in source-document(b i em…)
    ›box_Spaces→horizontal(start&end no<br>),no box_Measurement 
    ›have 5 lines: baseline in font-box in logical-box(t?b-line)
  2•replaced-i: ›noContent in doc: img object iframe video audio
    ›have {display: inline-block?table}: input meter progress textarea select svg br wbr
 *aspect-ratio(≠inline?td?th): autoⒹ| <ratio: #.f|#/#>;
★replaced-els: its internal layout uneffected by current css
  •<img|video|iframe|embed> •special case: <input type=image> 
    <audio|canvase|object|option> .anonymous-replaced{content:}
  ▬issueFix: .replaced-overflow{max-inline-size:100%}
    #{selector.nest('.grid,.flex','.replaced')}{w:100%;h:100%}
  ▬aspect-ratio(≠inline?td?th): autoⒹ→replaced| <ratio:#/#|#.f>
    •object-fit: fillⒹ|none≠resize|cover|contain|scale-down
    •object-position:(%:align % original-img-w?h with % css-w?h)
     tb'x㊿| lr?center?±L%'y㊿ <tb?centerⒹ?±L%>?| lr ±L% tb ±L%;
★form:
  ▬reset: textarea{overflow:auto} button,input,select,textarea{
      font-family: inherit; font-size: 100%;
      box-sizing: border-box; padding: 0; margin: 0;}
★display: none| list-item| inline-|block?flex?grid?table|
    t-cell?row?column?caption(?)|-header?row?footer?column-group
    | flow-root| contents;
  •none: remove el & its descendants from layout,(col, colgroup behave as display:contents;).
  •contents: hide el-box & display its content,(replaced & form els→ none) ex: button fieldset legend details
  •table,flex,grid,list-item: outside behave as display: block;
  •flow-root: el become new block-formating-context (???)
★visibility: visible| hidden| collopse;
  •collopse: table-els,flex-items{display:none}, else{v:hidden}.
★border|-<side>: <style> <width> <color>;
  •b-<style|width|color>: all|v h|t h b|t r b l;
    ›b-<side>-color: <color>;
    ›b-<side>-width: length| thin| mediumⒹ| thick;
    ›b-<side>-style: noneⒹ| hidden| solid| double| dotted| dashed| groove'normal| ridge'clicked| inset| outset;
 *b-collapse(table): collapseⒹ|separate;
 *b-spacing↓(table): h=v'length| h v;
 *b-radius: <cR>(circle)| <hR>/<vR>(ellipse); length0d|%
  (unapply inner table when {b-collopse: collapseⒹ})
  •cR|hR|vR: all|tl=br tr=bl|tl tr=bl br|tl tr br bl;
  •b-<corner>-radius: r| hr vr; (#one or #two values)
 *b-image: <source> <slice/width/outset> <repeat>;
  (unapply inner table when {b-collopse: collapseⒹ})
  •bi-source: noneⒹ| <image>;
  •bi-slice: fill? [all|v h|t h b|t r b l]; #(no-px)|100%d
   (clip part of image to be displayed in 9<side|corner|center>) 
    ›if(value > image-w|h){value=100%}
    ›if(img=bitmapped){%→img-w(h)|-h(v)}
      else if(img=svg|gradient){%→box-sizing}
    ›fill: optional, enable center-slice(padding-box).
  •bi-width: all|v h|t h b|t r b l; auto|#1d(*border-w)|length|%
    ›if(img=bitmapped){%→img-w(h)|-h(v)} else{%→border-w}
    ›auto: match bi-slice, else match border-w.
  •bi-outset: all|v h|t h b|t r b l; length|#0d(*border-w)
    ›puch to margin-<side>, recommended to add some margin.
  •bi-repeat(sides): stretchⒹ| repeat| round| space;
    ›repeat: center origin (side parts ot image) & "can clip" 
    ›round: scale width or height to fill
    ›space: add evenly h&v-gaps & preserve aspect-ratio.
 *outline: <styls> <width> <color>; (unaffect layout-size)
  •o-style: [b-<side>-style]; (#one value)
  •o-width: length| thin| mediumⒹ| thick;
  •o-color: <color>| invertⒹ(generated by UA, invalid in css);
  ••o-offset: ±length; puch to|#outside margin-box.
★box-shadow: noneⒹ|inset? x y <blur-r> <±spread-r> <color>, …;
  •spread: ±length; scale by ±amount on 4sides.
  •subSequenced box-shadow's overrided by the previos ones.
★bg: color img position/size repeat attachment <origin clip>,…?;
 *bg-color: <color>; *bg-image: noneⒹ| <image>;
 *bg-position: xⒹ?y=side(omitted=50%)| x y| h offset v offset;
  •x?y: ±length0d| ±%| <side>| centerⒹ;   •h?v: <side>; 
  •offset: ±length| ±%;(omitted h?v→0 {bg-p: hs OF vs|hs vs OF})
  •#%: mean align #% of bg-origin box-w|h, with #% of img-w|h
  •applyTo(top left|0 0) of image, relative to bg-origin box.
  •bg-position-x?y:center|<side>|±L%;
 *bg-size: cover?contain| w(h=auto)| w h;
  •width|height: autoⒹ|length|%(r to bg-origin)
    ›auto: preserving image-origin aspect-ratio.
  •cover: scale to big-dimension of painting-area(fixed:vmax)
    ›display #only one|part of big-image (bg-repeat ignored)
    ›cropped if aspect-ratios not matched.
  •contain: scale to smallDimension of painting-area(fixed:vmin)
    ›display full imgs, unMatched aspectRatios left gap toRepeat
 *bg-repeat:repeat-x?y| [repeatⒹ| no-repeat| space| round]{1,2}
  •repeat: fill & #crop & preserve-aspectRatio(also <space>)
  •space: fill+unCrop & add evenly x|y Gaps(bg-position ignored)
  •round: fill+unCrop & stretch|shrink x|y ≤50% of all imgs
 *bg-attachment: scrollⒹ| fixed| local≠S19;
  •fixed: painting-area = viewport (bg-origin ignored)
  •local: painting-area = element ,overflow:scroll; bg-clip≠text
 *bg-origin: border-box| padding-boxⒹ| content-box;
  •painting-area Determines how the bg-position is calculated.
 *bg-clip: border-boxⒹ| padding-box| content-box| text;
  •text(3.5-webkit→98%): contrastRatio ≥4.5, ↓accessibility
    ›if bg-image:url; color-fallback required
    ›incompatible with bg-shorthand & bg-attachment:fixed;
 *multi-backgrounds: #first override previos ones.
  •individual: ›bg-color: <fallback>;
    ›bg-image: url(url1)|<gradient1>, url(url2)|<gradient2>, …;
    ›bg-position|origin|repeat|attachment|size|clip: vl1, vl2,…;
  •shorthand: ›bg: vl1, vl2, …, vln color(only on last vl);
★opacity: 0~1d; affect both foreground & background.
★filter: blur0d(length) brightness|contrast|saturate(≤#1d|100%≤) grayscale0d|sepia0d|invert0d|opacity1d(≤#1|100%) hue-rotate(<angle>) drop-shadow(offsetX offsetY <blur> <color>)

