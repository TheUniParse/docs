
★transform: none'd| rotate?translate?scale|X?Y?Z?3d() skew?X?Y() matrix?3d() perspective();
  ›unapply to unReplaced-i & table-column|-group els.
  ›functions executed by #order, subsequence functions apply to main-axis of #transformed-box(not origin-box).
  ›el:statePseudoClass{#t:required reset all el{t:functions()}}

 *2Dimensions: •rotate?Z(<angle>);
    ›t-origin: <bg-position≠offset>(50% 50%'d→border-box);
  •translate(x'y=0|x,y)|X(x)|Y(y); ›x?y: ±length0d|±%'border-box
  •scale(x=y=±#1d|x,y)|X(x)|Y(y); ›#€-1~1: shrink, else grow.
    ›-#→pointReflection,-x:e→9, -y:e→6, -x=-y:6→9'rotate(.5turn)
  •skew(x'y=0|x,y)|X(x)|Y(y); ›x?y: <angle>.

 *3Dimensions: •demo: #parent{
     perspective: none'd|length'z0→eye; /*create shared 3Dview*/
     perspective-origin: <bg-position>;/*shared 3DviewPosition*/
     t-style: flat'd| preserve-3d;         /*enable 3d nesting*/
    .t-Child{ position: absolute;          /*enable 3d nesting*/
      t: perspective(length'z0→eye) /*create individual 3Dview*/
        rotate3d(x,y,z,<angle>) rotateX?Y?Z(<angle>)
        translate|scale3d(x,y,z) transate|scaleX?Y?Z();
      t-origin: x?y'omitted→50%|x y z(length0d)?;     /*rotate*/
      backface-visibility: visible'd|hidden;          /*rotate*/
  •perspective:; apply to t-childrens, ›length'r=200big~1000px.
    »p-origin: 50% 50%'d; #only apply to perspective property.
      ›%'border-box, 3values21-moz?webkit-95≠Opera1.4≠gulp.
    »perspective(z-distance:z=0'2Dplane→user) apply→ current tEl
      ›viewPosition uncontrollable, can mixed under p-property.
  •t-origin(→rotate): x?y'omitted→50%| x y z(±length0d)?;
    ›x?y: ±length| ±%'border-box| center'd| <side>.
    ›z-offset: +push|-pull #rotated z0'origin far|to?behind user
  •t: »rotate3d(x,y,z,<angle>); x?y?z-coordinates: ±#'r=-1~1.
      ›rotate clock-wise p→o-axis, Point(x,y,z) Origin(t-origin)
      ›x=y=z=0 valid & #ignored. ›rotate?Z(a)→rotate3d(0,0,1,a)
    ›translate3d(x,y,z); x?y:±length?±%, z:±length.
    »scale3d(x,y,z); x?y?z: ±#1d, -#→pointReflection -z:e/3→3/e.
      ›t: scaleZ(sz) translateZ(z);→ t: translateZ(calc(z*sz));
  •3Daxises: ox→+ rotateX(90°)'6→-, oy↓+ rotateY(90°)'6→|,
    ›oz↑user+: rotate?Z(180°)'6→9 translateZ() scaleZ().