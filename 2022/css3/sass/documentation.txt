… ★ • › » ⁂ ⁑ × ÷ € ← → ↑ ↓ ↔ ↕ ⇆ π ♪ ≠ ≈ ≤ ≥ ± © ✓ ✖ Ø † ⁰ ₱
scss= superset of css, sass= indent syntax style sheet.
★variables: :root{$var-name:value;} s{property: $var-name;}
★nesting: s0{p:v; s01{p:v; s011{p:v} &.a s012{p:v}}}
★partials: _pName.scss≠compiled→css called by @use rule.
 ›@use 'pName'; before any rule≠≈@forward|$var, rel→current.scss
★modules: @use 'src/module'; p:module.$var; @include module.mName; (+funcion)
★@mixin mName($var:iV){p1:$var;…} s{@include mName?($var:v);…}
★%sharedName{p1:v;…}≠compiled→css, s{@extend %sharedName;…}
★operators: +-*%,@use 'sass:math' math.div(600px, 960px) * 100%;

★sass stylesheet stracture:
  •statement0= selector{statement1;statement2}
  •statement= style-rule, property-declaration
 *univarsal statements: used anywhere
  •declaraion: $variable:value
  •flow control: @if @else @each @for @while
  •@error @warn @debug
 *css statements: used anywhere except in @function
  •style rule selector{}
  •css at-rule @media @fon-face @supports @keyframes
  •@include (call @mixin)
  •@at-root
 *top-lvl statements: top-lvl at stylesheet|css statement
  •modyle loads @use
  •@import
  •@mixin (definition)
  •@function (definition)
 *other statements:
  •property-declaration used in style-rule or some @at-rule
  •@extend used only in style-rule

 *sassScript: are expression can be in right of 
  •property:expression; $variable:expression; 
  •@function?mixin?if(expression)
 *sassScript can be:
  •number: 12|12px
  •string: 'url'|bold
  •color: #00f|blue
  •boolean: true|false
  •null
  •lists: 1em .5em red|1em Rosemary, sans-serif|[l=end] 
  •maps: ('background': red, 'foreground': pink)
  •can contain &
 *operators
  •== !=
  •+ - * / %
  •< > <= >=
  •and or not
  •string concatenate + - /
  •( )
 *other sassScript=expressions
  •$var
  •function calls: var(--custom-property) nth($list, 1) if()
  •special function: calc() url()
  •parent selector: &
  •!important

★comments: /*!preserve /*Øif-compressed //ØleftLine ///ØsassDoc
★style rules: as css selector{declarations=property:value;} +
•nesting:
  ›s-lists: s0>sa, s0>sb, s1>sa, s1>sb{} = s0,s1{sa,sb{}}
  ›s-combinators: s0>s1{} = s0>{s1{}}| s0{>s1{}}| s0{>{s1{}}}
  »parent&: &=outer-selector, can be after|before|argumentOf s
    s0{s1{ul :is(&, s3):hover{}}}//&=s0 s1
    ›suffix: .a__b--c-d{} = .a{&__b{&--c{&-d{}}}}
    ›in sassScript: s0,s1{parent-selector:&}//&=s0,s1
    ›outside style-rule: & return null(=false)
     @mixin b{#{if(&,'&.a:before','.a:before')}{content:'♪ '}}
      .b{@include c}//.b.a:before{content: '♪ '}
      @include c;//.a:before{content: '♪ '}
    ›unify with another selector://'s0… s4'+'.a'{}=s0… s4.a{}
      @mixin a($s){@at-root #{selector.unify(&,$s)}{@content}}
      .f :valid{
        @include a('[type=tel]'){}//.f [type=tel]:valid{}
        @include a('input:after'){}//.f input:valid:after{}
      }
  »@at-root: remove outer selector, s0{@at-root div{}}//div{}
    ›by default nesting include outer selector even if & used
  »properties: s{border-*} = s{border:{style:solid;size:thin}}
    ›s{margin:1em{left:0}}

•#{interpolation}:
  ›can inject #{sassScript expression} in selector:
    @mixin a($s,$v:' ✖'){&>#{$v1}:after{content:$v}} 
    @include a(':valid',' ✓'); @include a(':invalid');
  ›can mixed with &parent-selector, @at-root, s-function()
  ›can contain #{if()}
  ›can injected as|in propertyName:
    @mixin mName($property,$val,$prefixes){
      @each $prefix in $prefixes{-#{$prefix}-#{$propery}:$val}
      #{$property}: $val}
    .selector{@include mName(background-clip,text,moz webkit)}
  ›can injected as :root{--custom-property: #{$value};}
  »issue: interpolation return unquoted string.
    ›fix: @use 'sass:meta'; :root{--font: #{meta.inspect($f)}}

•propery: can be nested, interpolated, hidden:
  ›@mixin mName($c:false){color:if($c,#0f0,null)}
    s0{@include mName}/*Ø*/ s1{@include mName(true)}/*#0f0*/

•placeholders: (css.class + sass:superPower)
  ›can grouped with other selectors: s0, %placeholder{}
  ›can nest other selectors: %placeholder{p:v;&:hover{}}
  ›called by s{@extent %placeholder;}

•css variables:
  ›declared only inside rules
  ›can have different values on different els: 
    el{p:var(--custom-property, fallback-value)}
  ›updating is value affect with both old|new usages.
  ›
  ›
•sass variables:
  ›can declared anywhere, in|out rules, before|after top-rules.
  ›can contain other variables: $v1: $v2 * $v3;
  »can have only 1 value at time: 
    ›$map: ('key':'value',…)
    ›$list: item1 …|,…|/… or (i1 …|,…|/…) or [i1 …|,…|/…]
  ›updating is value affect just new≠old usages
  ›hyphen=underScore: $var-name=$var_name
  ›!defualt flag used in new-$var|$var:null, else old value used
  »configuring modules: @use 'url' with ($var1:val1,$var2:val2);
    ›$vars must be declared by !default at stylesheet top #lvl.
  ›build-in module variables cannot be modified: 
    @use 'sass:<build-in>'; <build-in>.$var: '≠update';//invalid
  »scope: ›local: declared & accessed just in same block.
    ›global: declared at stylesheet top lvl, accessed anywhere.
  »shadowing: if global $var updated in block, we will creat two scopes, global(unEffected) and its local(updated) shadow.
    ›to assign value globaly from local scope add !global flag.
  ›
  ›

•flow control rules:
  »@else? if not? <expression>{}
    ›@mixin a($a,b){p:v;
      @if $a>$b{} @else if not $a{}@else if string.index($a,' ')
      {} @else {@error 'Unknown value #{$a}.';}}
    ›any value=true including 0|''|()|[], except null=false.
  »@each <variable?,…> in <expression>{}
    ›@each $item in $list{.#{'' + $item}{color:$item}}
    ›@mixin l($list...){@each $i in $list
      {.#{'' + $i}{color:$i}}} @include l(red, green);
    ›@each $a,$b,$c in ([a1 a2 a3],$subList2,(c1,c2,c3))
      {#{$a}:before {color:$b;content:'' + $c + ' '}}
    ›@mixin n($nest...){ @each $a,$b,$c in $nest
      {#{$a}:before{color:$b;content:'' + $c + ' '}}
     }@include n(h1 #fff ★,(h2 #ff0 ▶),(h3,#0f0,»),[h4 cyan ›])
    ›@each $key,$value in $map {##{$key:before{content:$value}}
    ›@mixin m($map...){ @each $k,$v in meta.keywords($map)
      {#{$k}:after{content:' ' + $v}} } @include m($h1:1,$h2:2);
  »@for $i from <expression> to|through <expression>{}
    ›can descent↓ or ascent↑, to=exclude|through=include last #
    ›@for $i from 5 to 10{}     //$i:5→6→7→8→9
    ›@for $i from 5 through 10{}//$i:5→6→7→8→9→10
    ›@for $i from 10 to 5{}     //$i:10→9→8→7→6
    ›@for $i from 10 through 5{}//$i:10→9→8→7→6→5
  »@while <expression>{}
   ?›required math
•global functions: hsl()
  ›rgb?a($color, $alpha), last $alpha used: rgb(#0005,1)=#000
  ›if($condition, $return-if-true, $return-if-false)
  »≠recommended: ›map-get?values|keys?has-key|remove?merge
    ›list-separator|is-bracketed|length|index|set-?nth|append|join|zip
    ›un?quote|str-length?index?slice?insert|to-upper?lower-case|unique-id

•build-in module:
  »@use 'sass:math';
    »variables: ›math.$e//Euler#=2.718… ›math.$pi//π=3.14…
   •Bound'ing funcs:
    »clamp($min,$number,$max)//$min>#>$max
      »$min,$number,$max must be all unitless or have:
        ›compatible units: in|cm|mm|q≠s19|pc|pt|px
        ›same unit: rem|em|ch|ex|%|vw|vh|vmin|vmax|dpi|ppi|x|…
      ›clamp(-10,0,10)//0 ›clamp(-5…,-10…,5…)//-5…
      ›clamp(calc(1pc/1pt)*1q,calc(96px/(1in/1cm)),10mm)//10mm
    »min?max($v...)//smallest?biggest-val
      ›$v... must have compatible|same units, unitless
    ›ceil?floor(#.f)//#+1?# ›round(#.f≥5|#.f<5)//#+1|#
      ›fraction≠0, # can be either unitless or with #unit.
   •Distance funcs:
    ›abs(±#|±#unit)//absolute: +#|+#unit
    »hypot($lengths...)//√($l1²+…)
      ›$l... must have compatible(1st used)|same units, unitless
      ›hypot($ox)//1D:$om(x)=√($ox²)=math.abs($ox)
      ›hypot($ox,$oy)//2D:$om(x,y)=√($ox²+$oy²)
      ›hypot($ox,$oy,$oz)//3D:$om(x,y,z)=√($ox²+$oy²+$oz²)
   •Exponential funcs:
    »sqrt(+#)//squareRoot:pow(#,.5)=√# √+∞→∞slow ›sqrt(-#)//NaN 
    »pow($base,$exp)=$result ›log($result:+#,$base:null)=$exp
      »pow($base:±#,$exponent:±#)//power(^carat)
        ›pow(-#,$exp:odd)//-… ›pow(-#,$exp:even)//+…
        ›pow(+#,$exp:]-1,0[U]0,1[)//(1/$exp)√#| √-#→NaN
        ›pow(±#,$exp:[1,+∞[)//±#^$exp ›pow(±#,$exp:0)//1
        ›pow(±#,$exp:]-∞,-1])//1÷(±#^math.abs($exp))
        »pow(math.$e,±x)//e^-∞→0 e^-1=1/e e^0=1 e^1=e e^+∞→∞fast
      »log($result:+#, $base?:null=math.$e)//ln=logarithmNatural
        ›log($b^#,$b)//# ›log(1)//0
        ›log(0,$b:]1,∞[)//-Infinity ›log(→+∞,$b:]1,∞[)//→+∞slow
        ›log(0,$b:]0,1[)//Infinity ›log(→+∞,$b:]0,1[)//→-∞slow
        »ln-#=NaN ln0=-Infinity ln0.f=-# ln1=0 lne=1 ln+∞→∞slow
   •Trigonometric funcs:
    »cos()
    »sin()
    »tan()
    »acos()
    »asin()
    »atan()
    »atan2()
… ★ • › » ⚠️ 💡 × ÷ € ← → ↑ ↓ ▶ ²√⇆ π ♪ ≠ ≈ ≤∞≥ ± © ✓✗✖ Ø † ⁰ ₱

   •›.div: .s{width: math.div(600px, 960px) * 100%;}
… ★ • › » ⚠️ 💡 × ÷ € ← → ↑ ↓ ▶ ²√⇆ π ♪ ≠ ≈ ≤∞≥ ± © ✓✗✖ Ø † ⁰ ₱

  »@use 'sass:string';
    »issue:all sass buildIn.funcs return unquoted string
      ›fix: meta.inspect(string.func(/**/))
    ›length($string)//#
    »index($string,$subString)//first $subString letter nth|null
      ›index('hello world',world);//7
      ›index('hello world',undefined);//null
    »slice($str, ±#startAt, ±#endAt?:-1D)//return slice of $str
      ›slice('hello world',-5)//'world'
      ›slice('I love you',3,6)//'love'
    »insert($string, $insert, ±#)//insert string on ±index
      ›insert('I\'am good','not ',-5)//"I'am not good"
      ›insert('hello',' world',100);//'hello world'
      ›insert('world','hello ',-100);//'hello world'
    ›quote(str|'str')//'str' ›unquote(str|'str')//str
    ›to-upper-case('Bill')//'BILL' ›to-lower-case(Bill)//bill
    ›unique-id()//ufw2ymw(≠ ufw2ybm ≠ …)
  »@use 'sass:color';
    ›
    ›
    ›
    ›
    ›
  »@use 'sass:list';
    »issue invaid-lists(currently): i1/… (i1/…) [# …|i1,…|i1/…] 
      ›fix→sass2: calc(/)=math.dev(), /separator=list.slash()
    »$list: item $s …| ($l|k:V,…|i1,|Ø)| [$l|i1|Ø]; $s:&#32|,|/;
      ›@mixin a($l...){@each $i in $l{.#{'' + $i}{color:$i}}}
      ›@mixin n($nest...){ @each $a,$b,$c in $nest
        {#{$a}:before {color:$b; content:'' + $c + ' '}}
      }@include n(h1 #fff ★,(h2 #ff0 ▶),(h3,#0f0,»),[h4 cyan ›])
      ›can use list.index() in: @if not?| @else if not?| if()
      ›immutablility: all list.funcs() return #copy of org $list
    ›is-bracketed($list)//boolean
    ›separator($list)//space?comma?slash
    »length($list)//#
      ›length((k1:v1,k2:v2))//2
    »index($list,in)//n (index start counte from 1≠0)
      ›index((ka:va,kb:vb), kb vb)//2
      ›index(i1 i2 i2 i2 i3,i2)//2 (index of first same item)
      ›index((i1,i2),iUndefined)//null
    »nth($list,±#)//item±#
      ›list.nth((k1:v1,k2:v2,k3:v3,k4:v4),-2);//k3 v3
    »set-nth($list,±#,$v)//return $list copy & replace i±#→$v
      ›set-nth((k1:v1,k2:v2),-1,ku update)//k1 v1,ku update
      ›set-nth(i1 i2,3,update)//Error: $n: Invalid index
    ›slash(i1,…)//i1/… ›slash(i1 i2,i3 i4)//i1 i2/i3 i4
    »append($list,$v,$separator?:auto'd|space=d1|comma|slash)
      ›append(i1 i2,i3,$separator:$s)//i1 $s i2 $s i3
      ›append(($l),in,$separator:$s)//i1 $s … $s in
      ›append([$l],in,$separator:$s)//[i1 $s … $s in]
      ›append((k:v,…),kn vn,$separator:$s)//k v $s … $s kn vn
      ›append((k:v,…),kn vn,$separator:space)//(k v) (…) (kn vn)
    »join($list1,$list2,$separator?,$bracketed?:auto|true|false)
      ›auto'd: $separator=$l1,$l2,space $bracketed=$l1,false
    »zip($list1,…)//$list=$subList1,…
      ›return: comma-separator $list, space-separator $subLists
      ›$sublists nth = smallest list.length($list#)
      ›zip(a1 a2,(b1,b2,b3),[c1 c2 c3]) //a1 b1 c1, a2 b2 c2
  »@use 'sass:map';
    »$map:(<expression>:<expression>, …);
      ›(unique-key:associated-value) can be empty ()
      ›recommended to quote 'keys', avoid confuse with colorName
      ›immutablility: all map.funcs() return #copy of org $map
      ›@each $k,$v in $map {.#{'' + $k}:before{content:$v}}
      ›@mixin add($k,$v){$map:map.merge($map,($k,$v)) !global;}
      ›@mixin m($m...){ @each $k,$v in meta.keywords($m)
        {#{$k}:after{content:' ' + $v}}}@include m($h1:1,$h2:2);
    »keys((k1:v1, k2:v2, k3:v3))//k1,k2,k3
      ›keys((k:(ka:va,kb:vb), k1:v1))//k,k1
    »has-key((k:v), k1)//false
      ›has-key((k: (ka:va)), k,ka)//true
    »values((k1:v1, k2:v2, k3:v3))//v1,v2,v3
      ›values((k:(ka:va,kb:vb), k1:v1))//(ka:va,kb:vb),v1
    »get((key:value),key)//value
      ›get((k:(ka:(ka1:va1))), k,ka,ka1)//va1
      ›get((ka:va), kb)//null
    »set((k:v),k,update)//(k:update)
      ›set((k0: (k:v)), k0,k,update)//(k0: (k:update))
      ›set((k:v),kPlus,vPlus)//(k:v, kPlus:vPlus)
    »remove((k1:v1, k2:v2, k3:v3), k2, k3, kIgnored)//(k1:v1)
      ›deep-remove((k:(ka:va,krm:vrm)), k,krm)//(k: (ka:va))
    »merge((k:v,k1:v1),(k:update,k2:v2))//(k:update,k1:v1,k2:v2)
      ›merge((k0:(k:v)), k0,k,(ku:update))//(k0:(k:(ku:update)))
      ›merge((k0:(k:v)), k0,(ka:va))//(k0: (k:v, ka:va))
      ›deep-merge((k:(ka:va)),(k:(kb:vb)))//(k:(kb:kb,ka:va))
  »@use 'sass:selector';
    ›.unify: s0 s1{@at-root #{selector.unify(&,'.child')}{/**/}}
    ›
    ›
    ›
    ›
  »@use 'sass:meta';
    ›.inspect: .s{--custom-property: #{meta.inspect($quoted)};}
    ›
    ›
    ›
    ›

•terminal:
  ›@debug <expression>//path/file.scss:#(line) Debug: <combile>
  ›@error <expression>: stops compiling, in @mixin|function
    //Error: <compile>
    //       |
    //#(line)| …@include mName();…
    //       |
   //path/file.scss #:#(line:column) root stylesheet(or mName())
  ›@warn <expression>: don't stops compiling, in @mixin|function
    //Warning: <compile>
    //path/file.scss #:#(@warn) mname()
    //path/file.scss #:#(@include) root stylesheet
… ★ • › » ⚠️ 💡 × ÷ € ← → ↑ ↓ ▶ ↕ ⇆ π ♪ ≠ ≈ ≤ ≥ ± © ✓✗✖ Ø † ⁰ ₱