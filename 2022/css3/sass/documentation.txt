… ★ • › » ⁂ ⁑ × ÷ € ← → ↑ ↓ ↔ ↕ ⇆ π ♪ ≠ ≈ ≤ ≥ ± © ✓ ✖ Ø † ⁰ ₱
scss= superset of css, sass= indent syntax style sheet.
★variables: :root{$var-name:value;} s{property: $var-name;}
★nesting: s0{p:v; s01{p:v; s011{p:v} &.a s012{p:v}}}
★partials: _pName.scss≠compiled→css called by @use rule.
 ›@use 'pName'; before any rule≠≈@forward|$var, rel→current.scss
★modules: @use 'src/module'; p:module.$var; @include module.mName; (+funcion)
★@mixin mName($var:iV){p1:$var;…} s{@include mName?($var:v);…}
★%sharedName{p1:v;…}≠compiled→css, s{@extend %sharedName;…}
★operators: +-*%,@use 'sass:math' math.div(600px, 960px) * 100%;

★sass stylesheet stracture:
  •statement0= selector{statement1;statement2}
  •statement= style-rule, property-declaration
 *univarsal statements: used anywhere
  •declaraion: $variable:value
  •flow control: @if @else @each @for @while
  •@error @warn @debug
 *css statements: used anywhere except in @function
  •style rule selector{}
  •css at-rule @media @fon-face @supports @keyframes
  •@include (call @mixin)
  •@at-root
 *top-lvl statements: top-lvl at stylesheet|css statement
  •modyle loads @use
  •@import
  •@mixin (definition)
  •@function (definition)
 *other statements:
  •property-declaration used in style-rule or some @at-rule
  •@extend used only in style-rule

 *sassScript: are expression can be in right of 
  •property:expression; $variable:expression; 
  •@function?mixin?if(expression)
 *sassScript can be:
  •number: 12|12px
  •string: 'url'|bold
  •color: #00f|blue
  •boolean: true|false
  •null
  •lists: 1em .5em red|1em Rosemary, sans-serif|[l=end] 
  •maps: ('background': red, 'foreground': pink)
  •can contain &
 *operators
  •== !=
  •+ - * / %
  •< > <= >=
  •and or not
  •string concatenate + - /
  •( )
 *other sassScript=expressions
  •$var
  •function calls: var(--custom-property) nth($list, 1) if()
  •special function: calc() url()
  •parent selector: &
  •!important

★comments: /*!preserve /*Øif-compressed //ØleftLine ///ØsassDoc
★style rules: as css selector{declarations=property:value;} +
•nesting:
  ›s-lists: s0>sa, s0>sb, s1>sa, s1>sb{} = s0,s1{sa,sb{}}
  ›s-combinators: s0>s1{} = s0>{s1{}}| s0{>s1{}}| s0{>{s1{}}}
  »parent&: &=outer-selector, can be after|before|argumentOf s
    s0{s1{ul :is(&, s3):hover{}}}//&=s0 s1
    ›suffix: .a__b--c-d{} = .a{&__b{&--c{&-d{}}}}
    ›in sassScript: s0,s1{parent-selector:&}//&=s0,s1
    ›outside style-rule: & return null(=false)
     @mixin b{#{if(&,'&.a:before','.a:before')}{content:'♪ '}}
      .b{@include c}//.b.a:before{content: '♪ '}
      @include c;//.a:before{content: '♪ '}
    ›unify with another selector://'s0… s4'+'.a'{}=s0… s4.a{}
      @mixin a($s){@at-root #{selector.unify(&,$s)}{@content}}
      .f :valid{
        @include a('[type=tel]'){}//.f [type=tel]:valid{}
        @include a('input:after'){}//.f input:valid:after{}
      }
  »@at-root: remove outer selector, s0{@at-root div{}}//div{}
    ›by default nesting include outer selector even if & used
  »properties: s{border-*} = s{border:{style:solid;size:thin}}
    ›s{margin:1em{left:0}}

•#{interpolation}:
  ›can inject #{sassScript expression} in selector:
    @mixin a($s,$v:' ✖'){&>#{$v1}:after{content:$v}} 
    @include a(':valid',' ✓'); @include a(':invalid');
  ›can mixed with &parent-selector, @at-root, s-function()
  ›can contain #{if()}
  ›can injected as|in propertyName:
    @mixin mName($property,$val,$prefixes){
      @each $prefix in $prefixes{-#{$prefix}-#{$propery}:$val}
      #{$property}: $val}
    .selector{@include mName(background-clip,text,moz webkit)}
  ›can injected as :root{--custom-property: #{$value};}
  »issue: interpolation return unquoted string.
    ›fix: @use 'sass:meta'; :root{--font: #{meta.inspect($f)}}

•propery: can be nested, interpolated, hidden:
  ›@mixin mName($c:false){color:if($c,#0f0,null)}
    s0{@include mName}/*Ø*/ s1{@include mName(true)}/*#0f0*/

•placeholders: (css.class + sass:superPower)
  ›can grouped with other selectors: s0, %placeholder{}
  ›can nest other selectors: %placeholder{p:v;&:hover{}}
  ›called by s{@extent %placeholder;}

•css variables:
  ›declared only inside rules
  ›can have different values on different els: 
    el{p:var(--custom-property, fallback-value)}
  ›updating is value affect with both old|new usages.
  ›
  ›
•sass variables:
  ›can declared anywhere, in|out rules, before|after top-rules.
  ›can contain other variables: $v1: $v2 * $v3;
  »can have only 1 value at time: 
    ›$map: ('key':'value',…)
    ›$list: item1 …|,…|/… or (i1 …|,…|/…) or [i1 …|,…|/…]
  ›updating is value affect just new≠old usages
  ›hyphen=underScore: $var-name=$var_name
  ›!defualt flag used in new-$var|$var:null, else old value used
  »configuring modules: @use 'url' with ($var1:val1,$var2:val2);
    ›$vars must be declared by !default at stylesheet top #lvl.
  ›build-in module variables cannot be modified: 
    @use 'sass:<build-in>'; <build-in>.$var: '≠update';//invalid
  »scope: ›local: declared & accessed just in same block.
    ›global: declared at stylesheet top lvl, accessed anywhere.
  »shadowing: if global $var updated in block, we will creat two scopes, global(unEffected) and its local(updated) shadow.
    ›to assign value globaly from local scope add !global flag.
  ›
  ›
•flow control rules:
  »@if|@else if|@else <expression>{}
    ›@mixin a($a,b){p:v;
      @if $a>$b{}@else if not $a{}@else if string.index($a,' '){} @else {@error 'Unknown value #{$a}.';}}
    ›any value=true including 0|''|[], except null=false.
  »@each <variable> in <expression>{}
    $list:1,2,3,4;
    @each $v in $list{h#{$v}{color:hsl(calc($v*10) 100% 50%)}}
    »sass list: can be Ø=()=[]| 1item=(1item,)=[1item]| #items
      ›separators: el1,…|10px …|1px/…|[n1 …]
      ›all sass:list.functions
    ›
  »@while:
  »@for:
•build-in module: 
  »global functions: hsl()
    ›rgb?a($color, $alpha), only $alpha used: rgb(#0005,1)=#000
    ›if($condition, $return-if-true, $return-if-false)
    »≠recommended: ›map-get?has-key?merge?remove?keys?values()
      ›append?index?is-bracketed?join?length?list-separator?nth?
        set-nth?zip
      ›
  »@use 'sass:math';
    ›.div: .s{width: math.div(600px, 960px) * 100%;}
    ›
    ›
    ›
    ›
    ›
  »@use 'sass:string';
    »quote()
    »index()
      ›
    »insert()
    »length()
    »slice()
    »to-upper-case()
    »to-lower-case()
    »unique-id()
    »unquote()
  »@use 'sass:color';
    ›
    ›
    ›
    ›
    ›
  »@use 'sass:list';
    »issue invaid-lists(currently): i1/… (i1/…) [i1/…] [i1,…] 
      ›fix→sass2: calc(/)=math.dev(), /separator=list.slash()
    »$list: item $s …| ($l|k:V,…|i1,|Ø)| [$l|i1|Ø]; $s:&#32|,|/;
    »slash(i1,…)//i1/… ›slash(i1 i2,i3 i4)//i1 i2/i3 i4
    »append($list,$v,$separator?:auto'd|space=d1|comma|slash)
      ›append(i1 i2,i3,$separator:$s)//i1 $s i2 $s i3
      ›append(($l),in,$separator:$s)//i1 $s … $s in
      ›append([$l],in,$separator:$s)//[i1 $s … $s in]
      ›append((k:v,…),kn vn,$separator:$s)//k v $s … $s kn vn
      ›append((k:v,…),kn vn,$separator:space)//(k v) (…) (kn vn)
    »join($list1,$list2,$separator?,$bracketed?:auto|true|false)
      ›auto'd: $separator=$l1,$l2,space $bracketed=$l1,false
    »length($list)//#
      ›length((k1:v1,k2:v2))//2
    »index($list,in)//n
      ›index((ka:va,kb:vb), kb vb)//2
      ›index(i1 i2 i2 i2 i3,i2)//2 (index of first same item)
      ›index((i1,i2),iUndefined)//null
    »nth($list,±#)//item±#
      ›list.nth((k1:v1,k2:v2,k3:v3,k4:v4),-2);//k3 v3
    »set-nth($list,±#,$v)//return $list copy & replace i±#→$v
      ›set-nth((k1:v1,k2:v2),-1,ku update)//k1 v1,ku update
      ›set-nth(i1 i2,3,update)//Error: $n: Invalid index
    ›is-bracketed($list)//boolean
    ›separator($list)//space?comma?slash
    »zip($list1,…)//$list=$subList1,…
      ›return: comma-separator $list, space-separator $subLists
      ›$sublists nth = smallest list.length($list#)
      ›zip(a1 a2,(b1,b2,b3),[c1 c2 c3]) //a1 b1 c1, a2 b2 c2
  »@use 'sass:map'; 
    »$map:(<expression>:<expression>, …);
      ›
    »keys((k1:v1, k2:v2, k3:v3))//k1,k2,k3
      ›keys((k:(ka:va,kb:vb), k1:v1))//k,k1
    »has-key((k:v), k1)//false
      ›has-key((k: (ka:va)), k,ka)//true
    »values((k1:v1, k2:v2, k3:v3))//v1,v2,v3
      ›values((k:(ka:va,kb:vb), k1:v1))//(ka:va,kb:vb),v1
    »get((key:value),key)//value
      ›get((k:(ka:(ka1:va1))), k,ka,ka1)//va1
    »set((k:v),k,update)//(k:update)
      ›set((k0: (k:v)), k0,k,update)//(k0: (k:update))
      ›set((k:v),kPlus,vPlus)//(k:v, kPlus:vPlus)
    »remove((k1:v1, k2:v2, k3:v3), k2, k3, kIgnored)//(k1:v1)
      ›deep-remove((k:(ka:va,krm:vrm)), k,krm)//(k: (ka:va))
    »merge((k:v,k1:v1),(k:update,k2:v2))//(k:update,k1:v1,k2:v2)
      ›merge((k0:(k:v)), k0,k,(ku:update))//(k0:(k:(ku:update)))
      ›merge((k0:(k:v)), k0,(ka:va))//(k0: (k:v, ka:va))
      ›deep-merge((k:(ka:va)),(k:(kb:vb)))//(k:(kb:kb,ka:va))
  »@use 'sass:selector';
    ›.unify: s0 s1{@at-root #{selector.unify(&,'.child')}{/**/}}
    ›
    ›
    ›
    ›
  »@use 'sass:meta';
    ›.inspect: .s{--custom-property: #{meta.inspect($quoted)};}
    ›
    ›
    ›
    ›

•terminal:
  ›@debug <expression>//path/file.scss:#(line) Debug: <combile>
  ›@error <expression>: stops compiling, in @mixin|function
    //Error: <compile>
    //       |
    //#(line)| …@include mName();…
    //       |
   //path/file.scss #:#(line:column) root stylesheet(or mName())
  ›@warn <expression>: don't stops compiling, in @mixin|function
    //Warning: <compile>
    //path/file.scss #:#(@warn) mname()
    //path/file.scss #:#(@include) root stylesheet
… ★ • › » ⚠️ 💡 × ÷ € ← → ↑ ↓ ▶ ↕ ⇆ π ♪ ≠ ≈ ≤ ≥ ± © ✓✗✖ Ø † ⁰ ₱