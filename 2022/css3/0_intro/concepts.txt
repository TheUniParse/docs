
★insurting cascading style sheet: link|@media|style|style=
 <head>
   •<link href=external.css rel=stylesheet>        <!--cached-->
   •<style>                                      <!--embedded-->
     •@import url(external.css);                     /*cached*/
     /*rules= selector{declaration_block= properties:values;}*/
   </style>
 </head><body>
   <tag •style=/*inline_declarations*/></tag>      <!--inline-->
 <body>

★inheritance:
  •html elements build in hi|erar|čhical structure.
    ›ançe|stors: high hierarchy level.
    ›des|cen|dants: low hierarchy level.
    ›sib|lings: same hierarchy level.
    ›parent: one level high in hierarchy.
    ›child: one level low in hierarchy.
  •descendanrs inherit some ancestors properties(font|color|…)(not border|background|…), & overrided by descendents styles.
  •some measurements inherited as absolute result: em|rem|%→px↓

★priorite:
  user-agent(browser) < user(reader) < author(css) < author(!important) < user(!important)

  *specificity(selectors weight): generic < specific
    •(*) < (tag|::pseudoElement) < (.class|:pseudoClass) < (#id)
  •[id #billion] [class|pseudoClass #] [tag|pseudoElement #nano]

  *order (the last win):
    •external(link|@import) < embedded(style) < inline(style=)
    •different rules: in external|embedded|inline
      rule(i) < rule(í+1)
      ›ex: el1{/*fallback*/}
           el1,el2{/*new&unsupported*/} /*overrided fallback*/
    •different declarations: same rule same selector.
      declaration(i) < declaration(i+1)
      ›ex: el{color:red; color:purple;} /*purple win*/

★measurement(length):
  *absolute units:
    •real: in, cm, mm, q(=mm/4)
    •print: pt(point=in/72), pc(picas=12pt=in/6)
    •ppi resolushion depending: px(pixel=in/96~135)
  *relative units: 
    •rootElement m_width: rem(%→<html>)
      ›defined by user_agent(browser), adjusted by user(reader)
    •Element m_width: em(%→parent) (like percentage)
      ›if el{font-size:10px}, then 1em=100%=10px| 1rem=16px'd
      ›h1:2em| h2:1.5em| h3:1.2em| h4:1em| h5:.85em| h6:.65em
    •current 0_width:ch(0→same_parent)
    •current x_height: ex(x→same_parent)
    •viewport: vw|vh|vmin|vmax
      ›<meta name=viewport content=width=device-width, initial-scale=1>

★functions: 
  ›can be: ±#| length| %| <time:s?ms>| <angle>| <frequency:Hz?kHz>| nested min?max?calc?clamp(<math-operations>)
  ›math operators: ±v1 ± ±v2 ± ±v3…| ±v*±#*±#…| ±v/±#/±#…
•calc(<math-operators>): set sum of math operator.
•min?max(mo1, mo2, …): set smallest?largest unordered sum. 
•clamp(mo1,mo2,mo3):set middle(rel sum) limited by min & max sum
•var(--custom-property, fallback-value): store reused value of custom property declared in :root{--c-p: val;}.









