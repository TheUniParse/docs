
*styling: (overriding-priority 1>2>3>4)
  1•inline-style: attribute
  2•internal<style>: 
    ›inside <head> in html5, 
    ›at top or inside <defs> in svg file.
  3•external.css
    »by @import 'rule'; inside <style> of:
      ›<object> or <iframe> or <svg> inside html5 (not <img>)
  4•svg-attributes
*scripting: (overriding-priority 1>2>3)
  1•in <svg> inline|external, wraped in XML_Character_Data_Block
    <script>
      <![CDATA[
        //scripts
      ]]>
    </script>
  2•<script> in <body>
    ›<script src=external.js></script>
  3•<script> in <head>
    ›<script src=external.js></script>
  •demo-link: http://snapsvg.io/demos/
*animation:
  •svg/smil(synchronized multimedia integration language):
    ›not supported
  •css:
    ›@keyframes & transition applay just to css properties, (not all svg attributes can be properties)
    ›cant applay to <img> & background-image
  •javascript:
    ›best option, supported & have full-access to all svg-attributes.
    ›Note: canvas also contain js-animations & better than svg
    »js animation-libraries:
      ›snapsvg.io
      ›svgjs.com (11kb)
      ›velocityjs.org (jQuery-like)
      ›bonsaijs.org
      »path-rendering-animations:
        ›https://github.com/ConnorAtherton/walkway
        ›http://lazylinepainter.info/
        ›maxwellito.github.io/vivus
  •demo-link: https://codepen.io/chrisgannon
*Data Visualization:
  •demo-links:
    https://github.com/d3/d3/wiki/Gallery
    https://observablehq.com/@d3/bar-chart-transitions
*accessibility:
  •add <title> to <svg>|<g>|<any-container!!>
  •add <desc> to <any-element!!>
  •add aria role attribute:
    ›<svg role=img>: treated as one-image, The child elements will not be accessible separately.
    ›<svg aria-labelledby='title desc'>: improve support to <title>|<desc>
    »<svg><g role='presentation|none'><text role=heading>:
      ›dont give role to <svg>
      ›to make screen reader ignore shapes, add role=presentation|none, 
      ›else <circle>→role=circle'd