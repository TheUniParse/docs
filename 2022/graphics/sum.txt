‚òÖ‚ñ∂‚ñ∫‚ñ¨‚Ä¢¬ª‚Ä∫‚ñ≤‚ô•‚ö†Ô∏èüí°¬±√ó√∑¬≤‚àöœÄ‚Å∞‚â†‚âà‚â§‚â•√ò‚àû‚úì‚úó‚úñ ‚Ç¨ ‚Üê ‚Üí ‚Üë ‚Üì ‚áÜ‚ô™¬©‚Ä†‚Ç±‚Ä¶
‚òÖbasics:
  ‚ñ∂sources: create img, use existed img, hire designer
    ‚ñ∫create one: ‚ñ¨drawn logo by illustrator
      ‚ñ¨capture by camera & edit it by photoshop
      ‚ñ¨scan by print & blure dot-pattern & resize to small
    ‚ñ∫use existed one: all images copyRighted
      ‚ñ¨creativecommons.org: free usage|reproducing but shared
        ‚Ä¢unsplash.com: all rights free high resolution & filter
        ‚Ä¢commons.wikimedia.org: all rights free high resolution
        ‚Ä¢flickr.com/creativecommons: some free some non-comarce
      ‚ñ¨royall-free: buy license 1once‚Üí ‚àûduration use|reproduce globaly in milti-projects 10$‚Üëistockphoto 50$‚Üëgettyimages
      ‚ñ¨rights-managed: buy license at period in single-project with particular usage in one location: gettyimages.com
    ‚ñ∫buy css: animations buttons gradients-templates‚Ä¶
      ‚ñ¨clipart.com: membership fee, high quality
      ‚ñ¨1clipart.com: icons|applications free|low-price
      ‚ñ¨thenounproject.com: one color icons free|fee/y
      ‚ñ¨iconfinder.com: full colored styles free|fee/m
  ‚ñ∂formats: raster=bit-mapped(jpg|png|gif|webp) vector(svg)
      terminal: $ file img.formatSuffix
    ‚ñ∫jpeg.org: (Joint Photographics Expert Group)
      ‚ñ¨properly for blended color transitions
      ‚ñ¨Truecolor based 24bit=rgb*8bit, lossy on each compression
      ‚ñ¨progressive #passes low‚Üíoriginal=load100% UX‚Üëperfermence
        ‚Ä¢by defualt load linear from top to bottom
    ‚ñ∫png: (Portable Network Graphics)
      ‚ñ¨features: ‚Ä¢Lossless compression
        ‚Ä¢transparency: alpha=Multiple-level, binary=on|off
        ‚Ä¢Interluce(progressive) display in multiple passes sizs‚Üë
        ‚Ä¢+Embed text: like copyright meta-information
        ‚Ä¢+Embed ICC: save colorProfileInfo system who create it
        ‚Ä¢+Gamma correction channel: adjust brightnessLvl
      ‚ñ¨based on: (8|24|48-bit rgb-colors) & (16-bit grayscale)
        ‚Ä¢png-8: properly for huge flat color areas as icon|logo
          ‚Ä∫transparency: binary(on|off) or variable(multi-levels)
          ‚Ä∫indexed numbers on each pixel of pallete,
            refer‚Üí 2^(1~8)=2~256color positioned in c-table?map
          ¬ªpalletes methods: ‚Ä∫Custom ‚Ä∫System
            ‚Ä∫Exact: if original colors ‚â§ 2^8=256.
              Optimized Octree (Paint Shop Pro Photo only)
            ‚Ä∫Adaptive: to most used colors.
              Optimized Median Cut (Paint Shop Pro Photo only)
            ‚Ä∫Perceptual'phs: Adabtive to human eye sansitivity
            ‚Ä∫Selective'phs: Perceptual to areas of broad color
            ‚Ä∫useless: Web Adaptive, Restrictive, or Web216
        ‚Ä¢png-24(Truecolor): properly for multiLvl transparency.
          ‚Ä∫alpha transparecy channel can have 2^8bit=256lvl.
        ‚Ä¢apng: (94%G) animated image better than gif
          ‚Ä∫support 24bit(Truecolor) & alpha channel transparency
    ‚ñ∫gif: (Graphic Interchange format) (useless)
      ‚ñ¨properly for large flat areas & binary transparency
      ‚ñ¨lossless comprition ‚ñ¨indexed based on 8bit like png8
      ‚ñ¨interlacing like jpeg progressive ‚ñ¨animated frames
    ‚ñ∫webp: (web picture) (91% + 3.4% g)
      ‚ñ¨can be lossy|lossless comprition, & 40-70% small ‚Üìsize.
      ‚ñ¨alpha transparency channel like png-24's
      ‚ñ¨animation like git & apng.
      ‚ñ¨can store meta & color profile ICC like png's
      ‚ñ¨link: developers.google.com/speed/webp
  ‚ñ∂resolution: img-r‚â†important/#px is, print-r=dpi'dotsPerInch
    ‚ñ∫some high-density screens as retina can display 4px‚Üë in 1px
      ‚ñ¨issues: css-img display narrow on retina, large on normal
    ‚ñ∫reference-pixel #x(x=scale): 1cssPX=#screenPX
      ‚ñ¨screenPX: apple=#point,google=#DP?DIP'deviceIndependentPx
      ‚ñ¨ex: .cssimg{width:10px;height:10px} /*96ppi 1x*/
        ‚Ä¢iphone4 326ppi 2x: 20pxScreen, 20PT, 20DP
        ‚Ä¢tablet 130ppi 0.5x: 50pxScreen, 5PT. 5DP
    ‚ñ∫to avoid blur: set:svg 1x, or at least:raster x1,raster x2
      ‚ñ¨<img src=img@1.webp srcset='i@.5.webp .5x, i@2.webp 2x'>
        //img@1:10x10px i@.5:5x5px i@2:20x20px
  ‚ñ∂strategy: ‚ñ∫goals: ‚ñ¨‚Üìsize:‚úìformat,optimize ‚ñ¨‚Üìhttp:sprits
      ‚ñ¨‚Üìbandwidth & quality:srcset='',sizes=''
    ‚ñ∫if simple illustration use css: -size, rwd, quality
      ‚ñ¨1_<style>: -http/uncached ‚ñ¨2_external.css: cached/+http
      ‚ñ¨links: css-tricks.com/the-shapes-of-css
        codepen.io/collection/yeDQoX
    ‚ñ∫else if complex illustration use svg: -size, rwd, quality
      ‚ñ¨styled & dynamic: ‚Ä¢<object>: cached/+http,‚â†external.css
        ‚Ä¢inline<svg> organize label optimize:-http/‚â†cached
      ‚ñ¨else optimize: ‚Ä¢<svg>:-http/uncached ‚Ä¢<img>:cached/+http
    ‚ñ∫else if must be responsive:
      ‚ñ¨few images: choice best format, export multi-sizes by PHs
      ‚ñ¨too much imgs: build automatic app on server run on fly
        to export multi-sizes optimize: ‚Ä¢glide.thephpleague.com
        ‚Ä¢cloudfour.com/thinks/image-resizing-services/
    ‚ñ∫else jest optimize: manually or by server-app.
  ‚ñ∂favicon: <link rel=icon type=image/x-icon href=/favicon.ico>
    ‚ñ∫convert: png?text?emoji‚Üíico: favicon.io/
    ‚ñ∫collection: <link rel=apple-touch-icon sizes=180x180 href=f.png>
      <link rel=icon type=image/png sizes=32x32 href=f32.png>
      <link rel=icon type=image/png sizes=16x16 href=f16.png>‚Ä¶
      <link rel=manifest href=/site.webmanifest>
‚òÖproduction: (photoshop|gimp)
  ‚ñ∂export differ formats: (export/save-for-web ctrl+shift+alt+s)
    ‚ñ¨transparency: 
      ‚Ä¢png24: save Truecolor-data in 4 channels r, g, b, a
      ‚Ä¢png8‚úó: save 256color-data in 1 channel rgba(,,, 0~1)
      ‚Ä¢gif|png8: save 256color-data in 1 channel rgba(,,, 0|1)
        ‚Ä∫issue: on multiLvl generate halo(edgeColor‚Üí#fff?#000) not suited to bg-color.
        ‚Ä∫fix: set matte‚Üínone, dither‚Üí100%, dither-method‚Üípattern
    ‚ñ∫jpeg: softEdges|blendColors
      ‚ñ¨quality:0~100% lossy ‚ñ¨progrissive:‚Üìsize ‚ñ¨blur:0~2 ‚Üìsize
      ‚ñ¨metadata(copyright, source, comment) ‚ñ¨embed color profile
    ‚ñ∫png:hardEdge|flateColor ‚Ä¢quality:lossless ‚Ä¢interlaced:‚Üësize
        ‚Ä¢metadata(copyright,source,comment) ‚Ä¢embed color profile
        ‚Ä¢matte(req transparency=√ò, dither=√ò): none(transparent), Eyedropper, Foreground, background, custom color.
      ‚ñ¨png24: transparency=variable 256lvl, better opti-method
      ‚ñ¨png8: ‚Ä¢colorTable:2~256
        ‚Ä¢transparency=variable‚úó|binary'd|√ò‚Üímatte ‚Ä∫dither:0~100%
          ‚Ä∫ditherMethod(anti-aliasing:smooth edges/bg contrast by matte): none, diffusion(0~100%), pattern, noise.  
    ‚ñ∫gif(hardEdge|flateColor animation): useless
      ‚Ä¢quality:lossless ‚Ä¢colorTable:2~256 ‚Ä¢interlaced:‚Üësize
      ‚Ä¢transparency=binary: ‚Ä∫dither:0~100% ‚Ä∫ditherMethod:asPNG8
      ‚Ä¢metadata(copyright,source,comment)
    ‚ñ∫webp: lossy|lossless better than jpg|png
  ‚ñ∂responsive: <meta name=viewport content='width=device-width'>
    ‚ñ∫high Density: same-size/different-resulotion
       <img alt='img@.5:50px,img:100px,img@2:200px'
        srcset='img@.5.webp .5x, img@2.webp 2x' src=img@1.webp>
      ‚ñ¨syntax: srcset='img #x,‚Ä¶'//return 1st img@#x‚â•resolution
      ‚ñ¨work at @1x‚â†2x scale: mathMistakes√ò pcPerfermence‚Üë stable
      ‚ñ¨export-as: ctrl+shift+alt+w, click +button, select #x's
      ‚ñ¨avoid upscale blur @1x:
        1‚Ä¢create new layer with target @1x width & height
        2‚Ä¢add original img ‚â• @3x|@2x [file‚Üíplace linked]
          ‚Ä∫issue: in Phs-2018 place-linked jpeg file ignored
          ‚Ä∫fix: convert jpeg to psd before place-linked.
        3‚Ä¢delete the empty layer & work with the place-linked
      ‚ñ¨automatic:‚Ä¢paidServer:cloudinary.com akamai.com kraken.io
        ‚Ä¢free web-app: https://docs.google.com/spreadsheets/u/0/d/1e4qdGEoq7tqDCnY7iSSnl3OFoWkzhRfVAly-73A3uCc/htmlview
    ‚ñ∫responsive-layout (different-sizes): <img src=fb
        alt='small420‚Üì,medium421~600,large601~1000,huge1001‚Üë'
        sizes='(max-w:600px) 100vw, (max-w:1000px) 80vw, 1200px'
        srcset='small 420w,medium 600w,large 800w,huge 1200w'>
      ‚ñ¨syntax:    load 1st img have size‚â•slot of 1st meted query
        sizes='(query1) slot1,‚Ä¶,sF'//return 1st meted query slot
        srcset='img1 size1,‚Ä¶'    //return 1st img have size‚â•slot
      ‚ñ¨resizing(manual by photoshop):
        ‚Ä¢percentage:.01~100~‚Üë%, scale by original aspectRatio
          ‚Ä∫else set width & height manually.
        ‚Ä¢resizing-quality: nearest neighbor, bilinear, bicubic'd, bicubic smooth, bicubic sharper.
      ‚ñ¨generate multi-imgs: responsivebreakpoints.com
        ‚Ä¢upload original-img, set target: ‚Ä∫max?min-width
          ‚Ä∫size steps (20kb'recomended|40kb|80kb|‚Ä¶) ‚Ä∫more!!.
        ‚Ä¢download & copy html markup to document, & done!!!.
      ‚ñ¨chrome testing: ‚Ä¢more-tools/Developer-tools/ ctrl+shift+i
        ‚Ä¢Toggle device toolbar ctrl+shift+m
          ‚Ä∫toggle [show device pixel ratio](else: DPR=2x'd).
        ‚Ä¢Network: record-downloads ctrl+r
        ‚Ä¢reload-button/Empty-Cache and Hard Reload
    ‚ñ∫art-direction (crop/aspectRatio/format-support):
      <picture>
       <source type=image/avif media=(orientation:portrite)
        sizes='(max-w:600px) 100vw, (max-w:1000px) 80vw, 1200px'
        srcset='pr-s.avif 420w,pr-m 600w,pr-l 800w,pr-h 1200w'>
       <source type=image/webp media=(orientation:portrite)
        sizes='(max-w:600px) 100vw, (max-w:1000px) 80vw, 1200px'
        srcset='pr-s.webp 420w,pr-m 600w,pr-l 800w,pr-h 1200w'>
       <img src=landscape-fallback.webp alt=''
        sizes='(max-w:600px) 100vw, (max-w:1000px) 80vw, 1200px'
        srcset='ls-s.webp 420w,ls-m 600w,ls-l 800w,ls-h 1200w'>
       </picture>
     ‚ñ¨media='query1, query2, ‚Ä¶?'
      ‚Ä¢query:type|and? features| not?only type'R [and features]?
       ‚Ä∫type: all'd| screen?print| speech‚â†supportedYet.
       ¬ªfeatures: feature [and feature]‚Ä¶?.
         ‚Ä∫feature=(name [: value]?): (aspect-ratio: w/h'ex16/9) (max?min-|w?h: length) (orientation:portrite?landscape)
         (max?min-|resolution‚â†S19: #x?dppx=96#dpi‚âà37.8#dpcm)
         (display-mode:browser?fullscreen?standalone?minimal-ui)
         (grid: 0=bitmap?1=grid) (color|:#8d(8bit=256)'0noColor)
         (any-|pointer'both|: none?coarse'touch?fine'noTouch)
         (any-|hover|: none?hover'noTouch)
      ‚Ä¢operators: ‚Ä∫,(=or): at least one query return true.
        ‚Ä∫and: all individual-features & type must return true.
        ‚Ä∫not: negation #sum of next type&features before ,(=or).
        ‚Ä∫only: unapply style-block if old-browser‚â†support @media
     ‚ñ¨artice: www.smashingmagazine.com/2016/09/automating-art-direction-with-the-responsive-image-breakpoints-generator/
     ‚ñ¨generate multi-imgs: responsivebreakpoints.com
        ‚Ä¢upload original-img, set target: ‚Ä∫max?min-width
          ‚Ä∫size steps (20kb'recomended|40kb|‚Ä¶) ‚Ä∫max-imgs:40‚Üì 
          ‚Ä∫support retina screens 2x
          ¬ªart-direction: ‚Ä∫select css width size by vw unit.
            ‚Ä∫device:mobile|tablet|small-laptop|desktop.
            ‚Ä∫aspect-ratio:w/h crop important content by analys methods as face?edges-detection visual-uniqueness.
        ‚Ä¢download & copy html markup to document, & done!!!.
  ‚ñ∂optimization:
    ‚ñ∫
    ‚ñ∫
    ‚ñ∫