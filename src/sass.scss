@use 'partial';@use 'sass:map';@use 'sass:list';@use 'sass:string';@use 'sass:meta';@use 'sass:math';
@mixin a($a,$b){
  color: rgb(0 255 170);
  @if $b >= 10{color: rgb(229 255 0)}
  @else if $a==false{color: red}
  //@else{@debug '💡 ($a,$b):' ($a,$b);}
  //@else{@warn '⚠️ ($a,$b):' ($a,$b);}
  //@else{@error '⚠️ ($a,$b):' ($a,$b);}
}h1{@include a(true,9);}
//@debug if(condition,✓,✖);

@mixin list($args...){
  @each $arg in $args{
    h#{$arg}{color: hsl(calc($arg*10) 100% 50%)}
  }
}@include list(1,2,3,4);

@mixin nest($nest...){
  @each $a,$b,$c in $nest{
    #{$a}:before{color:$b;content:'' + $c + ' '}
  }
}//@include nest(h1 #fff ★,(h2 #ff0 ▶),(h3,#0f0,»),[h4 cyan ›]);
@each $a,$b,$c in (h1 #fff ★,(h2 #ff0 ▶),(h3,#0f0,»),[h4 cyan ›]){#{$a}:before{color:$b;content:'' + $c + ' '}}

@mixin map($args...){
  //@debug meta.keywords($args);
  @each $k,$v in meta.keywords($args){
    #{$k}:after{content:' ' + $v}
  }
}//@include map($h1:1,$h2:2,$h3:3,$h4:4);
@for $i from 4 through 1{h#{$i}:after{content:' ' + $i}}

//@each $c in (red blue){.#{'' + $c}{color:$c}}//list
//@each $k,$v in (invalid:✖,valid:✓) {##{'' + $k}:before{content:$v}}

//@for $i from 1 to 5{h#{$i}::first-letter{color:cyan}};
//@for $i from 1 through 4{h#{$i}::first-letter{color:cyan}};
//@for $i from 4 to 0{h#{$i}::first-letter{color:cyan}};
//@for $i from 4 through 1{h#{$i}::first-letter{color:cyan}};

//@while $condation-true{}









//@debug math.$e;//e=2.7182818285
//@debug math.$pi;//π=3.1415926536

//@debug math.clamp(-10,0,10);//@debug math.clamp(-5…,10…,5…);
//@debug math.clamp(calc(1pc/1pt)*1q,calc(96px/(1in/1cm)),10mm);

//@debug math.max(10,100,0,-50);//@debug math.min(10,100,0,-50);
//@debug math.max(1in,1cm,96px);//@debug math.min(-10…,10…);

//@debug math.ceil(4.00001);//5 //@debug math.floor(4.99999);//4
//@debug math.round(4.4999em); //4 //@debug math.round(4.5%);//5


//@debug math.abs(-10%);

//@debug math.hypot(1,2);//√(1+4)=√5≈2.2360679775
//@debug math.hypot(-10cm,1in,1mm);
//@debug math.hypot(10…,-2…,1…,20…);
//@debug math.hypot(-2.2m,2.4m,1.6m);


//@debug math.sqrt(169); @debug math.pow(169,.5);

//@debug math.sqrt(-1); @debug math.pow(-1,.5);//NaN
//@debug math.pow(3,-3); @debug calc(1/27);
//@debug math.pow(-995,0);//1

//@debug math.log(math.$e);//@debug math.log(math.$e,null);
//@debug math.log(math.$e,math.$e);
//@debug math.log();
@debug math.pow(math.$e,calc(-1/math.$e));

//@debug math.cos();
//@debug math.sin();
//@debug math.tan();
//@debug math.acos();
//@debug math.asin();
//@debug math.atan();
//@debug math.atan2();



//@debug math.compatible();
//@debug math.is-unitless();
//@debug math.unit();



//@debug math.div();
//@debug math.percentage();
//@debug math.random();












//@debug string.length('welcom to my life');

//@debug meta.inspect(string.index('hello world',world));
//@debug meta.inspect(string.index('hello world',undefined));

//@debug meta.inspect(string.slice('hello world',-5));
//@debug meta.inspect(string.slice('I love you',3,6));

//@debug meta.inspect(string.insert('I\'am good','not ',-5));
//@debug meta.inspect(string.insert('hello',' world',100));
//@debug meta.inspect(string.insert('world','hello ',-100));

//@debug meta.inspect(string.quote(BILL));
//@debug meta.inspect(string.unquote('BILL'));

//@debug meta.inspect(string.to-upper-case(Bill));
//@debug meta.inspect(string.to-lower-case(Bill));

//@debug meta.inspect(string.unique-id());








//$l1:  a b;  $la:  a,b;  //$la1:  a/b;
//$l2: (a b); $lb: (a,b); //$la2: (a/b);
//$l3: [a b]; //$lc: [a,b]; $la3: [a/b];//sass2.0.0

//@debug list.is-bracketed([i1 i2]);
//@debug list.separator(());

//@debug list.length([i1 i2 i3]);
//@debug list.length((k1:v1,k2:v2));

//@debug list.index((i1 i2), i2);
//@debug list.index((i1,i2), i2);
//@debug list.index(i1 i2 i2 i3,i2);//2
//@debug list.index((ka:va,kb:vb), kb vb);

//@debug list.nth([i1 i2 i3 i4],-2);
//@debug list.nth((k1:v1,k2:v2,k3:v3),-1);

//@debug list.set-nth(i1 i2 i3,2,vb);
//@debug list.set-nth((k1:v1,k2:v2),-1,kb vb);
//@debug list.set-nth(i1 i2,3,update);//error

//@debug list.slash(i1 i2,i3 i4);

//@debug list.append((i1,),v); @debug list.append([i1],v);
//@debug list.append((),empty); @debug list.append([],empty);

//@debug list.append((k:v), kn vn);//map
//@debug list.append((i1,i2),i3,$separator:space);

//@debug list.append([i1 i2],i3 i4,$separator:space);
//@debug list.append((i1 i2),i3 i4,$separator:space);
//@debug list.append(i1 i2,i3 i4,$separator:space);
//@debug list.append((k:v),k v,$separator:space);

//@debug list.join(i1 i2,[i3 i4]);
//@debug list.join([i1 i2],i3 i4,$bracketed:null);
//@debug list.join(i1 i2,(i3,i4), $separator:slash, $bracketed:1);
//@debug list.join((k:v),(ka:va),$separator:space,$bracketed:1);

//@debug list.zip(a1 a2 a3,(b1,b2,b3),[c1 c2 c3]);
//@debug list.zip(a1 a2,(b1,b2,b3),[c1 c2 c3]);







//@debug map.keys((k1:v1,k2:v2,k3:v3));
//@debug map.keys((k: (ka:va,kb:vb), k1:v1));//k,k1

//@debug map.has-key((k:v), k);
//@debug map.has-key((k:(ka:va)), k,ka);

//@debug map.values((k1:v1, k2:v2, k3:v3));
//@debug map.values((k: (ka:va,kb:vb), k1:v1));

//@debug map.get((key:value),key);@debug map.get((k:(ka:va)),k);
//@debug map.get((k:(ka:(ka1:va1))), k,ka,ka1);
//@debug map-get((key:value),key);

//@debug map.set((k:v),k,update);
//@debug map.set((k0: (k:v)), k0,k,update);
//@debug map.set((k:v),kPlus,vPlus);

//@debug map.remove((k1:v1, k2:v2, k3:v3), k2, k3, kIgnored);
//@debug map.deep-remove((k:(ka:va,krm:vrm)), k,krm);

//@debug map.merge((k:v,k1:v1), (k:update,k2:v2));
//@debug map.merge((k0:(k:v)), k0,k,(ku:update));
//@debug map.merge((k0:(k:v)), k0,(ka:va));
//@debug map.deep-merge((k:(ka:va)),(k:(kb:vb)));








// @use 'variables' with ($var: 'configured ');
// @use 'sass:meta'; @use 'sass:selector';
// p::before{content:variables.$var;color:#0f0}
// h1{color: variables.$c1;}h2{color: variables.$c2;}
// h3{color: variables.$c3;}h4{color: variables.$c4;}

// @mixin a($n,$v:' ✖',$c:false){
//   >:nth-child(#{$n}):after{content:$v;color:if($c,#0f0,red)}
// }
// body>div{@include a(3,' ✓',true); @include a(2)}
// body{>div{background: url(gaara.webp) center/contain no-repeat}}
// body>div>{@at-root div:first-of-type{
//   background-color: #010c;
//   margin:.5em{left:0}
// }}

// @mixin b{#{if(&,'&.a','.a')}{color:#07f}}
// .b{@include b}//.b.a{color:#07f}
// @mixin c{#{if(&,'&.a','.a:before')}{content: '♪ ';color:#827}}
// @include c;//.a:before{content: '♪';color:#827}

// @mixin d($child){@at-root #{selector.unify(&,$child)}{@content}}
// body .div0 .a{
//   @include d('h2::first-letter'){color: #008cff;}
//   @include d('.b::first-letter'){color: #0f0;}
// }
