@use 'partial';@use 'sass:map';@use 'sass:list';
@mixin a($a,$b){
  color: rgb(0 255 170);
  @if $b >= 10{color: rgb(229 255 0)}
  @else if $a==false{color: red}
  //@else{@debug '💡 ($a,$b):' ($a,$b);}
  //@else{@warn '⚠️ ($a,$b):' ($a,$b);}
  //@else{@error '⚠️ ($a,$b):' ($a,$b);}
}h1{@include a(true,9);}

$selectors: 1,2,3,4;
@each $n in $selectors{
  h#{$n}{color: hsl(calc($n*10) 100% 50%)}
}
$l1:  a b;  $la:  a,b;  //$la1:  a/b;
$l2: (a b); $lb: (a,b); //$la2: (a/b);
$l3: [a b]; //$lc: [a,b]; $la3: [a/b];//sass2.0.0
//@debug list.append($l1,c); @debug list.append($l2,c);
//@debug list.append($la,c); @debug list.append($lb,c);

//@debug list.append((i1,),v); @debug list.append([i1],v);
//@debug list.append((),empty); @debug list.append([],empty);

//@debug list.append((k:v), kn vn);//map
//@debug list.append((i1,i2),i3,$separator:space);

//@debug list.append([i1 i2],i3 i4,$separator:space);
//@debug list.append((i1 i2),i3 i4,$separator:space);
//@debug list.append(i1 i2,i3 i4,$separator:space);
//@debug list.append((k:v),k v,$separator:space);

//@debug list.join(i1 i2,[i3 i4]);
//@debug list.join([i1 i2],i3 i4,$bracketed:null);
//@debug list.join(i1 i2,(i3,i4), $separator:slash, $bracketed:1);
//@debug list.join((k:v),(ka:va),$separator:space,$bracketed:1);

//@debug list.index((i1 i2), i2);
//@debug list.index((i1,i2), i2);
//@debug list.index((ka:va,kb:vb), kb vb);

//@debug list.length([i1 i2 i3]);
//@debug list.length((k1:v1,k2:v2));

//@debug list.is-bracketed([i1 i2]);
//@debug list.separator(());

//@debug list.nth();
//@debug list.set-nth();
//@debug list.slash();
//@debug list.zip();






//@debug list.();
//@debug list.();
//@debug list.();
//@debug list.();
//@debug list.();










//@debug map.get((key:value),key);@debug map.get((k:(ka:va)),k);
//@debug map.get((k:(ka:(ka1:va1))), k,ka,ka1);
//@debug map-get((key:value),key);

//@debug map.set((k:v),k,update);
//@debug map.set((k0: (k:v)), k0,k,update);
//@debug map.set((k:v),kPlus,vPlus);

//@debug map.merge((k:v,k1:v1), (k:update,k2:v2));
//@debug map.merge((k0:(k:v)), k0,k,(ku:update));
//@debug map.merge((k0:(k:v)), k0,(ka:va));
//@debug map.deep-merge((k:(ka:va)),(k:(kb:vb)));

//@debug map.remove((k1:v1, k2:v2, k3:v3), k2, k3, kIgnored);
//@debug map.deep-remove((k:(ka:va,krm:vrm)), k,krm);

//@debug map.has-key((k:v), k);
//@debug map.has-key((k:(ka:va)), k,ka);

//@debug map.keys((k1:v1,k2:v2,k3:v3));
//@debug map.keys((k: (ka:va,kb:vb), k1:v1));//k,k1

//@debug map.values((k1:v1, k2:v2, k3:v3));
//@debug map.values((k: (ka:va,kb:vb), k1:v1));










// @use 'variables' with ($var: 'configured ');
// @use 'sass:meta'; @use 'sass:selector';
// p::before{content:variables.$var;color:#0f0}
// h1{color: variables.$c1;}h2{color: variables.$c2;}
// h3{color: variables.$c3;}h4{color: variables.$c4;}

// @mixin a($n,$v:' ✖',$c:false){
//   >:nth-child(#{$n}):after{content:$v;color:if($c,#0f0,red)}
// }
// body>div{@include a(3,' ✓',true); @include a(2)}
// body{>div{background: url(gaara.webp) center/contain no-repeat}}
// body>div>{@at-root div:first-of-type{
//   background-color: #010c;
//   margin:.5em{left:0}
// }}

// @mixin b{#{if(&,'&.a','.a')}{color:#07f}}
// .b{@include b}//.b.a{color:#07f}
// @mixin c{#{if(&,'&.a','.a:before')}{content: '♪ ';color:#827}}
// @include c;//.a:before{content: '♪';color:#827}

// @mixin d($child){@at-root #{selector.unify(&,$child)}{@content}}
// body .div0 .a{
//   @include d('h2::first-letter'){color: #008cff;}
//   @include d('.b::first-letter'){color: #0f0;}
// }
