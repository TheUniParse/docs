@use 'sass:map';@use 'sass:list';@use 'sass:string';
@use 'sass:meta';@use 'sass:math';@use 'sass:color';
@use 'sass:selector';
//@use 'partial';//@use 'partial' with ($font:serif,);
@use 'myFile';//@include meta.load-css(myFile);
@include myFile.myMixin(h1,h2);
//@include meta.load-css(partial,$with:('font':sans-serif,));
$module:partial;//can be unquoted two
//@include meta.load-css(#{$module},$with:('font':monospace,));
@include meta.load-css($module,$with:('font':monospace,));

@mixin a($a,$b){
  color: rgb(0 255 170);
  @if $b >= 10{color: rgb(229 255 0)}
  @else if $a==false{color: red}
  //@else{@debug 'üí° ($a,$b):' ($a,$b);}
  //@else{@warn '‚ö†Ô∏è ($a,$b):' ($a,$b);}
  //@else{@error '‚ö†Ô∏è ($a,$b):' ($a,$b);}
}h1{@include a(true,9);}
//@debug if(condition,‚úì,‚úñ);

@mixin list($args...){
  @each $arg in $args{
    h#{$arg}{color: hsl(calc($arg*10) 100% 50%)}
  }
}@include list(1,2,3,4);

@mixin nest($nest...){
  @each $a,$b,$c in $nest{
    #{$a}:before{color:$b;content:'' + $c + ' '}
  }
}//@include nest(h1 #fff ‚òÖ,(h2 #ff0 ‚ñ∂),(h3,#0f0,¬ª),[h4 cyan ‚Ä∫]);
@each $a,$b,$c in (h1 #fff ‚òÖ,(h2 #ff0 ‚ñ∂),(h3,#0f0,¬ª),[h4 cyan ‚Ä∫]){#{$a}:before{color:$b;content:'' + $c + ' '}}

@mixin map($args...){
  //@debug meta.keywords($args);
  @each $k,$v in meta.keywords($args){
    #{$k}:after{content:' ' + $v}
  }
}//@include map($h1:1,$h2:2,$h3:3,$h4:4);
@for $i from 4 through 1{h#{$i}:after{content:' ' + $i}}

//@each $c in (red blue){.#{'' + $c}{color:$c}}//list
//@each $k,$v in (invalid:‚úñ,valid:‚úì) {##{'' + $k}:before{content:$v}}

//@for $i from 1 to 5{h#{$i}::first-letter{color:cyan}};
//@for $i from 1 through 4{h#{$i}::first-letter{color:cyan}};
//@for $i from 4 to 0{h#{$i}::first-letter{color:cyan}};
//@for $i from 4 through 1{h#{$i}::first-letter{color:cyan}};

//@while $condation-true{}

@function pow($a,$b:$a){$c:1;@for $_ from 1 through $b{$c:$c*$a}
  @return $c};//@debug pow(3);
@mixin mixin($selector,$warn:false){
  @if $warn{
    #{$s}:before{content:'üí°Fun fact ';@content}
    #{$s}:after{content:' Endüí°';@content}
  }@else{
    #{$s}:before{content:'‚ö†Ô∏èHead Up! ';@content}
    #{$s}:after{content:' End‚ö†Ô∏è';@content}
  }
};//@include mixin('li:first-child',1){color:#bf0}
//@include mixin('li:nth-child(2)'){color: #f40}
@mixin mixin1($s,$warn:false){
  @if $warn{
    #{$s}:before{content:'üí°Fun fact ';@content}
    #{$s}:after{content:' Endüí°';@content}
  }@else{
    #{$s}:before{content:'‚ö†Ô∏èHead Up! ';@content}
    #{$s}:after{content:' End‚ö†Ô∏è';@content}
  }
};@include mixin1('li:first-child',1){color:#bf0}
@include mixin1('li:nth-child(2)'){color:#f40}


//@debug meta.module-functions(selector);

//@debug selector.is-superselector(a,'a.a,nav a%b:after');//true

//@debug selector.append(nav a,'.a p,%b p',':after,:before');

//@debug selector.nest(ul,'li%a','&:hover');

//@debug selector.extend();

//@debug selector.parse();
//@debug selector.replace();
//@debug selector.unify();
//@debug selector.simple-selectors();




//@debug (-1in==-96px);
//@debug (-1==-1);
//@debug (-1a==-1a);

//@debug ''=='';
//@debug ""=='';
//@debug "hello"=='hello'==true!=hello;
//@debug "hello"==hello;

//@debug #80808033==rgb(gray,.2);

//@debug [e1 e2]==[e1 e2];//true
//@debug [e1 e2]==[e2 e1];//false
//@debug (e1 e2)==(e1,e2);//false
//@debug (e1 e2)==[e1 e2];//false

//@debug (k1:v1,k2:v2)==(k1:v1,k2:v2);

//@debug null==false;//false
//@debug false==false;//true

@function a($a,$b){@return $a + $b};
@function b($a,$b){@return $a + $b};
//@debug meta.get-function(a,null,null)
//  == meta.get-function(a,null,null);//true
//@debug meta.get-function(a,null,null)
//  == meta.get-function(b,null,null);//false
//@debug meta.get-function(a,null,null)
//  == meta.get-function(a,null,myFile);//false


//@debug 3q<1mm;//true
//@debug 3q<=3;//true
//@debug 1px > 1s;//Error:1px and 1s have incompatible units.


//@debug 2q%4;@debug 6q%4;@debug -2q%4;//2q (r+kn)%n=r
//@debug .2q % 1;/*.2q*/@debug -.2q % 1;//.8q
//@debug -11q % 0;//NaNq

//@debug 1q + 2;//3q
//@debug 1q - 2;//-1q
//@debug 1s + 1px;//Error: 1s and 1px have incompatible units.
//@debug 1s - 1px;//Error: 1s and 1px have incompatible units.
//@debug 1s % 1px;//Error: 1s and 1px have incompatible units.

//@debug 1q*2q;//2q*q
//@debug 1s*2q;//2s*q
//@debug 1q*2;//2q
//@debug 1*2q;//2q

//@debug -identifier-1;//both hyphen
//@debug 1-identifier-1;//1=hyphen 2=subtract
//@debug -1unit-1;//1=unary-negation 2=subtract
//$v:10;@debug 1 -$v 2 (-$v);//1=subtract 2=unary-negation
//$v:10;@debug 1 - $v -($v + 0) 2 (-$v) -(math.ceil(2));

//@debug 8q/2mm;@debug list.slash(8q,2mm);//8q/2mm separator
@function d($a){@return $a/2};
//$v:16/2;@debug (4/2*4)/(2) $v/d(4) (8/2) d(8);//4 4 4 4|6(div+W)
//@debug 1in/96px == 1;//true divition Warn


























  //literal static-expressions ...............................
//@debug 3e-2;@debug 3*math.pow(10,-2);
//$v:math.div(5q*2q,1s);@debug $v are meta.type-of($v);
  //10q*q/s are number

//@debug .12345678905;//.1234567891
//@debug .123456789049;//.1234567890
//@debug math.round(.12345678905*1e10)*1e-10;//.1234567891
//@debug math.round(.123456789049*1e10)*1e-10;//.1234567890
//@debug .123456789011 == .123456789019;//true
//@debug .123456789011 >= .123456789019; // true
//@debug math.ceil(.123456789041*1e11)*1e-11 == math.ceil(.123456789049*1e11)*1e-11;//true
//@debug math.ceil(.123456789011*1e11)*1e-11 >= math.ceil(.123456789019*1e11)*1e-11;//true
//@debug math.div(1,1e11);//0
//@debug .1234567890123*1e13;//1234567890123

//h1{&:after{content: '\1f46d üë≠ \üë≠'}}
//@debug meta.inspect('\\\1f46d \'"\üë≠ \aüë≠"\#{$v}') ;
//@debug "C:\\\\Program Files";

@function a(){
  //@for $i from 0 through 9{
  //  $s: string.insert($s,'\\#{$i} ',-1);
  //}
  $hex:0 1 2 3 4 5 6 7 8 9 a b c d e f;
  $hexs:0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30;
  $hexs: ();
  @each $h in $hex {
    $hh:$h;
    @each $h in $hex {
      $hexs: list.append($hexs,string.unquote('#{$hh}#{$h}'));
    }
  }
  $s:'';
  @for $i from 1 through list.length($hexs){
    $s: string.insert($s,'\\#{list.nth($hexs, $i)}  ',-1);
  }
  @return $s;
}
//@debug a();
//@debug '\aff';
//@debug '\21  \22  \23  \24  \25  \26  \27  \28  \29  \2a  \2b  \2c  \2d  \2e  \2f  \30  \31  \32  \33  \34  \35  \36  \37  \38  \39  \3a  \3b  \3c  \3d  \3e  \3f  \40  \41  \42  \43  \44  \45  \46  \47  \48  \49  \4a  \4b  \4c  \4d  \4e  \4f  \50  \51  \52  \53  \54  \55  \56  \57  \58  \59  \5a  \5b  \5c  \5d  \5e  \5f  \60  \61  \62  \63  \64  \65  \66  \67  \68  \69  \6a  \6b  \6c  \6d  \6e  \6f  \70  \71  \72  \73  \74  \75  \76  \77  \78  \79  \7a  \7b  \7c  \7d  \7e  \7f  \80  \81  \82  \83  \84  \85  \86  \87  \88  \89  \8a  \8b  \8c  \8d  \8e  \8f  \90  \91  \92  \93  \94  \95  \96  \97  \98  \99  \9a  \9b  \9c  \9d  \9e  \9f  \a0  \a1  \a2  \a3  \a4  \a5  \a6  \a7  \a8  \a9  \aa  \ab  \ac  \ad  \ae  \af  \b0  \b1  \b2  \b3  \b4  \b5  \b6  \b7  \b8  \b9  \ba  \bb  \bc  \bd  \be  \bf  \c0  \c1  \c2  \c3  \c4  \c5  \c6  \c7  \c8  \c9  \ca  \cb  \cc  \cd  \ce  \cf  \d0  \d1  \d2  \d3  \d4  \d5  \d6  \d7  \d8  \d9  \da  \db  \dc  \dd  \de  \df  \e0  \e1  \e2  \e3  \e4  \e5  \e6  \e7  \e8  \e9  \ea  \eb  \ec  \ed  \ee  \ef  \f0  \f1  \f2  \f3  \f4  \f5  \f6  \f7  \f8  \f9  \fa  \fb  \fc  \fd  \fe  \ff';
//@debug \1f46d x \a \9 \7fx \03 \22;
//@debug xx\Exx;
//@debug --1\a9hello\a9hello;
//@debug -\a9hello;
//@debug hello\a9;



//@debug rgb(10%,55,55,$alpha:50%);
//@debug hsl(-30 100% 50%);

@function nest($n...){
  $l:();
  @each $a,$b,$c in $n{
    $l: list.append($l,$a+$b+$c)
  }@return $l;
}//@debug nest(1 1 1,2 2 2,3 3 3 3 3);//3 6 9

//@debug meta.type-of((bold 18px/2 RoseMary, serif));//list

//$g:a;@debug meta.inspect(''+$g);
//@debug math.pow(3,calc(4/2));
//@debug (sans-+serif) (sans - serif); // sans-serif
//@debug - moz;// -moz
//@debug / 15px;// /15px




@function scale-below($value, $base, $ratio: 1.618) {
  @while $value > $base {
    $value: math.div($value, $ratio);
  }
  @return $value;
}//@debug scale-below(20px, 16px);
$g:global; 
@function f(){ $l:local;
  @if true{$f:update;$g:update} @return $l $g
};@debug 'f()//'+f()+' global//'+$g;












// @use 'variables' with ($var: 'configured ');
// @use 'sass:meta'; @use 'sass:selector';
// p::before{content:variables.$var;color:#0f0}
// h1{color: variables.$c1;}h2{color: variables.$c2;}
// h3{color: variables.$c3;}h4{color: variables.$c4;}

// @mixin a($n,$v:' ‚úñ',$c:false){
//   >:nth-child(#{$n}):after{content:$v;color:if($c,#0f0,red)}
// }
// body>div{@include a(3,' ‚úì',true); @include a(2)}
// body{>div{background: url(gaara.webp) center/contain no-repeat}}
// body>div>{@at-root div:first-of-type{
//   background-color: #010c;
//   margin:.5em{left:0}
// }}

// @mixin b{#{if(&,'&.a','.a')}{color:#07f}}
// .b{@include b}//.b.a{color:#07f}
// @mixin c{#{if(&,'&.a','.a:before')}{content: '‚ô™ ';color:#827}}
// @include c;//.a:before{content: '‚ô™';color:#827}

// @mixin d($child){@at-root #{selector.unify(&,$child)}{@content}}
// body .div0 .a{
//   @include d('h2::first-letter'){color: #008cff;}
//   @include d('.b::first-letter'){color: #0f0;}
// }