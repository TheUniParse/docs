//@debug meta.module-functions(selector);

//@debug selector.is-superselector(a,'ul a.a');//true
//@debug selector.is-superselector('a.a',a);//false
//@debug selector.is-superselector(a,b);//false
//@debug selector.is-superselector(a,'ul a.a:not(a.a)');//true
//@debug selector.is-superselector(a,'a:after');//false
//@debug selector.is-superselector(a,'a%b,a.b,a#b,b a,:is(a)');//true

//@debug selector.append(ul a,'.b p,%b p',':after,:before');

//@debug selector.nest(ul,'li%a','&:hover');
//@debug meta.type-of(selector.nest(ul,'li%a'));//list
//#{selector.nest(ul,li)}{color:red}; //ul li{color:red}

//@debug selector.extend('.m a%b','%b','.n .b,a.c');
//@debug selector.extend('ul.b a.b','.b','%b');
//@debug selector.replace('.m a%b','%b','.n .b,a.c');

//@debug selector.parse('.a a:hover,.b p');//.a a:hover,.b p

//@debug selector.simple-selectors('a%b:hover');

//@debug selector.unify('.m .n a.b','.j .k a%b');
//@debug selector.unify('a%b','p%b');//null









//@debug color.red(teal);//0
//@debug color.green(teal);//128
//@debug color.blue(teal);//128
//@debug color.alpha(#fbc5);//.333333
//@debug color.hue(#fbc5);//346deg

//@debug color.saturation(#6115);//71.42%
  //@debug color.saturation(#5445);//11.11%
//@debug color.lightness(#ff00);//50%
  //@debug color.lightness(#ff10);//53.3333%
  //@debug color.lightness(#ffe0);//96.6666%
//@debug color.whiteness(#5445);//26.66666%
  //@debug color.whiteness(#fee5);//93.333%
//@debug color.blackness(#5445);//66.66666%
  //@debug color.blackness(#fee5);//0%

//@debug color.adjust(#f00,$red:-255);//black
//@debug color.adjust(#f00,$hue:-36060);//magenta
//@debug color.adjust(#f00,$saturation:-100%);//gray
//@debug color.adjust(#f001,$alpha:.2);//#f004

//@debug color.change(#f00,$hue:-36060);//magenta
//@debug color.change(#f00,$saturation:0%);//gray
//@debug color.change(#f001,$alpha:0);//red

//@debug color.complement(red);
//@debug color.adjust(red,$hue:180)

//@debug color.invert(white);//black
//@debug color.invert(aqua,33);//#54abab
//@debug color.invert(hsl(0,100%,51%));//hsl(180,100%,49%)
//@debug color.adjust(hsl(0,100%,51%),$hue:180,$lightness:-2%);

//@debug color.hwb(0,0%,0%,1);//red
//@debug color.hwb(0,90%,90%,1);//gray
//@debug color.hwb(color.hue(#a00),0%,0%,1);//red
//@debug color.hwb(180,1%,0%,1);//#0ff→#03ffff
//@debug color.hwb(180,0%,1%,1);//#0ff→#00fcfc

//@debug color.ie-hex-str(#f007);//77FF0000

//  @debug color.mix(#603,#045);//#324 (6+0 0+4 3+5)/2
//  @debug color.mix(#6031,#0455);//#252b4933
//  @debug color.mix(#603,#045,100);//#603
//  @debug color.mix(#603,#045,0);//#045
//  @debug color.mix(#603,#045,25);//#1a334d
//  @debug color.mix(#603,#045,75);//#4d113c

//@debug color.grayscale(hsl(90,100%,20%));//#333

//  @debug color.scale(#300,$red:-33%);//#200
//  @debug color.scale(#300,$red:50%);//#900
//  @debug color.scale(#300,$alpha:-80%);//#3003








//@include meta.load-css('build-in',$with:('var1':update,));

//@debug meta.inspect(meta.calc-name(calc(100px + 10%)));
//@debug meta.calc-args(calc(100px + 10%));
//@debug meta.inspect(meta.calc-name(clamp(1px,var(--c),9px)));
//@debug meta.calc-args(clamp(1px,var(--c),9px));

//@debug meta.call(meta.get-function(pow,null,math),3,2);
  //math.pow(3,2)=3^2=9
//@debug meta.call(meta.get-function(myFunc,null,myFile),3,2);
  //myFile.myFunc(3,2)=<result:3+2=5>

//@debug meta.type-of(calc(5px + 5%));//calculation
//@debug meta.type-of(clamp(50px,50%,200in));//calculation
//@debug meta.type-of(max(50px,50%));//calculation
//@debug meta.type-of(min(50px,50%));//calculation

//@debug meta.feature-exists(global-variable-shadowing);
//@debug meta.feature-exists(extend-selector-pseudoclass);
//@debug meta.feature-exists(units-level-3);
//@debug meta.feature-exists(at-error);
//@debug meta.feature-exists(custom-property);

//@debug meta.mixin-exists(myMixin);
//@debug meta.mixin-exists(myMixin,myFile);

@mixin reset($content:'content'){
  &:after{
    @if meta.content-exists(){content:' '+$content;color:#0f0}
    @else{content:' ✖';color:red}
    @content
  }
};h2{@include reset}h3{@include reset(3){font-style: italic}}
h4{@include reset(4)};

//@debug meta.function-exists(myFunc);//false
//@debug meta.function-exists(myFunc,myFile);//true
//@debug meta.function-exists(pow,math);//true

//@debug meta.variable-exists(v1);//false
//$v1:v;@debug meta.variable-exists(v1);//true
//selector{//local-scope
//  @debug meta.variable-exists(v2);//false
//  $v2:v;@debug meta.variable-exists(v2);//true
//}

//@debug meta.global-variable-exists(global);//false
$global:v;//@debug meta.global-variable-exists(global);//true
//selector{//local-scope
//  @debug meta.global-variable-exists(global);//true
//  $local:v;@debug meta.global-variable-exists(local);//false
//  @debug meta.global-variable-exists(myVar,myFile);//true
//  @debug meta.global-variable-exists(pi,math);//true
//}

//@debug meta.module-functions(myFile);
  //('myFunc': get-function('myFunc'))
//@debug meta.module-functions(meta);
  //('type-of': get-function('type-of'), …)
//@debug meta.call(map.get(meta.module-functions(math),pow),3,4);//3^4=81

//@debug meta.module-variables(myFile);//("myVar": v)
//@debug meta.module-variables(meta);//()
//@debug meta.module-variables(meth);
  //("e": 2.7182818285, "pi": 3.1415926536)

@function map($args...){@return meta.keywords($args)};
//@debug map($ka:a,$kb:b);//(ka: a, kb: b)
//@debug map(a,b,c);//()
//@debug map(ignored,$kb:b,$kc:[]);//(kb: b, kc: [])
//$args:(ka:a,kb:b); @debug map($args...);

//@debug 'hello';/*hello*/@debug meta.inspect('hello');//'hello'

//@debug meta.type-of(15);//number
//@debug meta.type-of(15unit);//number
//@debug meta.type-of(math.log(0));//number
//@debug meta.type-of(hello);//string
//@debug meta.type-of('hello');//string
//@debug meta.type-of(red);//color
//@debug meta.type-of(#f00);//color
//@debug meta.type-of(rgb(255, 0, 0));//color
//@debug meta.type-of(hsl(0, 100%, 50%));//color
//@debug meta.type-of(true);//bool
//@debug meta.type-of(false);//bool
//@debug meta.type-of(null);//null
//@debug meta.type-of(1 2 3);//list
//@debug meta.type-of(());//list
@mixin arglist($args...){
  @debug meta.type-of($args);
}//@include arglist();//arglist
//@debug meta.type-of((a:b));//map
@function arglist($args...){@return meta.keywords($args)};
//@debug meta.type-of(arglist(()));//map
//@debug meta.type-of(map.get(meta.module-functions(math),pow));
  //function






//@debug math.$e;//e=2.7182818285
//@debug math.$pi;//π=3.1415926536

//@debug math.max(10,100,0,-50);//@debug math.min(10,100,0,-50);
//@debug math.max(1in,1cm,96px);//@debug math.min(-10…,10…);
//@debug math.max(.5turn,210grad,10deg);//210grad
//@debug math.min(1s,1s - 1ms,.1);//.1 issue
//@debug math.min(1a,2a,3,4);//1a issue
//@debug math.max(1a,2a,3,4);//4 issue
//@debug math.max(1cm,10mm,3,4);//4 issue
//@debug math.max(10mm,1cm,3,4);//10mm issue
//@debug math.max(1cm,10mm,.5,1);//1cm
  //@debug math.max(1,1cm,10mm,40q,.5);// unexpected issue

//@debug math.clamp(-10,0,10);//@debug math.clamp(-5…,10…,5…);
//@debug math.clamp(calc(1pc/1pt)*1q,calc(96px/(1in/1cm)),10mm);
//@debug math.clamp(100grad,.75turn,math.$pi*1rad);//π
//@debug math.clamp(1cm,10mm,1in);//1cm
//@debug math.clamp(500ms,.7s,1s);

//@debug math.ceil(4.00001);//5
//@debug math.ceil(-4.00001);//-4
//@debug math.floor(4.99999);//4
//@debug math.floor(-4.99999);//-5
//@debug math.round(4.4999em);//4em
//@debug math.round(-4.4999em);//-4em
//@debug math.round(4.5%);//5%
//@debug math.round(-4.5%);//-5%



//@debug math.abs(-10a);

//@debug math.hypot(1,2);//√(1+4)=√5≈2.2360679775
//@debug math.hypot(-10cm,1in,1mm);
//@debug math.hypot(10…,-2…,1…,20…);
//@debug math.hypot(-2.2m,2.4m,1.6m);
//@debug math.hypot(3s,4000ms);//5s
//@debug math.hypot(3000ms,4s);//5000ms



//@debug math.sqrt(169); @debug math.pow(169,.5);
//@debug math.sqrt(-1); @debug math.pow(-1,.5);//NaN

//@debug math.pow(3,-3); @debug calc(1/27);
//@debug math.pow(-995,0);//1
//@debug math.pow(math.$e,-9999);//→0
//@debug math.pow(math.$e,-1); @debug calc(1/math.$e);
//@debug math.pow(math.$e,1);//e

//@debug math.log(math.$e);//@debug math.log(math.$e,null);
//@debug math.log(math.$e,math.$e);
//@debug math.log(0);//-Infinity
//@debug math.log(-1);//NaN
//@debug math.log(1,.1);//0
//@debug math.log(0,.1);//Infinity



// @debug math.cos(math.$pi);
// @debug math.cos(math.$pi*1rad);
//@debug math.cos(180deg);
// @debug math.cos(200grad);
// @debug math.cos(.5turn);
//@debug math.pow(math.cos(7),2) + math.pow(math.sin(7),2);//1
//@debug math.cos(math.$pi);

//@debug math.sin(calc(math.$pi/2));
//@debug math.tan(calc(math.$pi/-2));//-Indiniy
//@debug math.tan(calc(math.$pi/4));
//@debug math.tan(calc(-1*math.$pi/4));
//@debug calc(math.sqrt(2)/2); @debug calc(math.sqrt(3)/2);
//@debug math.tan(calc(math.$pi/3)); @debug math.sqrt(3);

//@debug math.acos(calc(math.sqrt(3)/2));
//@debug math.asin(calc(math.sqrt(3)/2));
//@debug math.atan(1);

//@debug math.atan2(1,1);
//@debug math.atan2(-1,1);
//@debug math.atan2(1,-1);
//@debug math.atan2(2,2);
//@debug math.atan2(2a,2a);



//@debug math.is-unitless(1);//true
//@debug math.is-unitless(1a);//false

//@debug meta.inspect(math.unit(1));//''
//@debug meta.inspect(math.unit(1a));//'a'

//@debug math.compatible(1s,2turn);//false
//@debug math.compatible(-1,2);//true
//@debug math.compatible(1a,5);//true issue
//@debug math.compatible(-1a,2a);//true
//@debug math.compatible(-1s,2ms);//true



//@debug math.div(4,2);//@debug math.div(4a,2a); //2
//@debug math.div(4a,2b);//2a/b
//@debug math.div(4a,2);//2a
//@debug math.div(4,2a);//2a^-1
//@debug math.div(4s,2000ms);//4s/2s=2
  //@debug math.div(4000ms,2s);//4000ms/2000ms=2

//@debug math.percentage(-.2);//-20%

//@debug math.random();//.f
//@debug math.random(5);//5
//@debug math.random($limit:1);//1
//@debug math.random($limit:5);//1?2?3?4?5










//@debug string.length('welcom to my life');

//@debug meta.inspect(string.index('hello world',world));
//@debug meta.inspect(string.index('hello world',undefined));

//@debug meta.inspect(string.slice('hello world',-5));
//@debug meta.inspect(string.slice('I love you',3,6));

//@debug meta.inspect(string.insert('I\'am good','not ',-5));
//@debug meta.inspect(string.insert('hello',' world',100));
//@debug meta.inspect(string.insert('world','hello ',-100));

//@debug meta.inspect(string.quote(BILL));
//@debug meta.inspect(string.unquote('BILL'));

//@debug meta.inspect(string.to-upper-case(Bill));
//@debug meta.inspect(string.to-lower-case(Bill));

//@debug meta.inspect(string.unique-id());








//$l1:  a b;  $la:  a,b;  //$la1:  a/b;
//$l2: (a b); $lb: (a,b); //$la2: (a/b);
//$l3: [a b]; //$lc: [a,b]; $la3: [a/b];//sass2.0.0

//@debug list.is-bracketed([i1 i2]);
//@debug list.separator(());

//@debug list.length([i1 i2 i3]);
//@debug list.length((k1:v1,k2:v2));

//@debug list.index((i1 i2), i2);
//@debug list.index((i1,i2), i2);
//@debug list.index(i1 i2 i2 i3,i2);//2
//@debug list.index((ka:va,kb:vb), kb vb);

//@debug list.nth([i1 i2 i3 i4],-2);
//@debug list.nth((k1:v1,k2:v2,k3:v3),-1);

//@debug list.set-nth(i1 i2 i3,2,vb);
//@debug list.set-nth((k1:v1,k2:v2),-1,kb vb);
//@debug list.set-nth(i1 i2,3,update);//error

//@debug list.slash(i1 i2,i3 i4);

//@debug list.append((i1,),v); @debug list.append([i1],v);
//@debug list.append((),empty); @debug list.append([],empty);

//@debug list.append((k:v), kn vn);//map
//@debug list.append((i1,i2),i3,$separator:space);

//@debug list.append([i1 i2],i3 i4,$separator:space);
//@debug list.append((i1 i2),i3 i4,$separator:space);
//@debug list.append(i1 i2,i3 i4,$separator:space);
//@debug list.append((k:v),k v,$separator:space);

//@debug list.join(i1 i2,[i3 i4]);
//@debug list.join([i1 i2],i3 i4,$bracketed:null);
//@debug list.join(i1 i2,(i3,i4), $separator:slash, $bracketed:1);
//@debug list.join((k:v),(ka:va),$separator:space,$bracketed:1);

//@debug list.zip(a1 a2 a3,(b1,b2,b3),[c1 c2 c3]);
//@debug list.zip(a1 a2,(b1,b2,b3),[c1 c2 c3]);







//@debug map.keys((k1:v1,k2:v2,k3:v3));
//@debug map.keys((k: (ka:va,kb:vb), k1:v1));//k,k1

//@debug map.has-key((k:v), k);
//@debug map.has-key((k:(ka:va)), k,ka);

//@debug map.values((k1:v1, k2:v2, k3:v3));
//@debug map.values((k: (ka:va,kb:vb), k1:v1));

//@debug map.get((key:value),key);@debug map.get((k:(ka:va)),k);
//@debug map.get((k:(ka:(ka1:va1))), k,ka,ka1);
//@debug map-get((key:value),key);

//@debug map.set((k:v),k,update);
//@debug map.set((k0: (k:v)), k0,k,update);
//@debug map.set((k:v),kPlus,vPlus);

//@debug map.remove((k1:v1, k2:v2, k3:v3), k2, k3, kIgnored);
//@debug map.deep-remove((k:(ka:va,krm:vrm)), k,krm);

//@debug map.merge((k:v,k1:v1), (k:update,k2:v2));
//@debug map.merge((k0:(k:v)), k0,k,(ku:update));
//@debug map.merge((k0:(k:v)), k0,(ka:va));
//@debug map.deep-merge((k:(ka:va)),(k:(kb:vb)));