‚ñ¨‚ñ¨‚ñ¨2022‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
‚ñ∂‚ñ∫‚óÑ‚ñ≤‚ñº‚òÖ‚ô•‚ñ¨‚Ä¢¬ª‚Ä∫‚ö†Ô∏èüí°‚öôÔ∏è¬±√ó√∑¬≤‚àöœÄ‚Å∞‚â†‚âà‚â§‚â•√ò‚àû‚úì‚úó‚úñ ‚Ç¨ ‚Üê ‚Üí ‚Üë ‚Üì ‚áÜ‚ô™¬©‚íπ„äø‚Ä†‚Ç±‚Ä¶
‚òÖconsepts: its riginal name was live-script ‚â†java.
  ‚ñ∫place into document: in <head> or just before </body>.
    ‚Ä¢embedded: <script>‚Ä¶</script>
    ‚Ä¢external: <secript src=path/file.js>/*√ò*/</script>
  ‚ñ∫loading: <script> pause HTML-parse until (fetch & execute).
   <s defer*src> parallel(fetch,parse), execute after parse-End
   <s async*src> parallel(fetch,parse), pauseParse until execute
‚òÖdata types:
  ‚ñ∫literal:
    ‚ñ¨undefned‚íπ if var declared without initialized.
    ‚ñ¨null: Define this var, but give it no inherent value
    ‚ñ¨boolean: true !false anyVal|false !true NaN''null0undifined
    ‚ñ¨number: ‚Ä¢integer: ¬±#‚â†.0 ‚Ä¢decimal'float: ¬±#.f ‚Ä¢double
    ‚ñ¨string: ‚Ä¢sequence of characters quoted by `|'|"
      ‚Ä¢+|+=operator concat str+str|str+number //string.
      ‚Ä¢backTick template: `str${<expression>str}` preserve WS
      ‚Ä¢\escape just before: \\ \' \" \n?u{a}=newLine \t?u{9}=tab \r?u{d}=carriageReturn \f?u{c}=formFeed \b?u{8}=backSpace \v?u{b}=lineTabulation
        ‚Ä∫\uHHHH \u{H~HHHHHH} \xHH
    ‚ñ¨array: [√ò|item,‚Ä¶?]
      ‚Ä¢items are members of ordered data(even[]&{}) comma separated surrounded by brackets[], indexed from 0
      ‚Ä¢accessed only by index arr[#].
    ‚ñ¨object: {√ò|property:value,method:function(){},‚Ä¶?}
  ‚ñ∫‚â†literal: varName|func()|(n?operator)
    ‚ñ¨func(): ‚Ä¢Worning: if assigned‚Üívar, start runing immediately
      ‚Ä¢if contain return: run until return, store returned data.
      ‚Ä¢if return omitted: run all the block, store undefined.
‚òÖbuld-in properties and methods: (everything are object)
  ‚ñ¨object:
    obj.property //return value of property
    obj.method() //call function() who stored in method
  ‚ñ∫DOM:Api translate html?xml‚Üí nodesTree accessed by js?ruby?c#‚Ä¶
    ‚Ä¢node in html: el, att, text
    ‚Ä¢document: object represent all html nodes.
      document.getElementById('id').appendChild(
        document.createElement('p').appendChild(
          document.createTextNode('Hi')));
      //<el id=id> now contain <p>Hi</p> as last child
   ‚ñ¨properties
    title //<title>
    body //<body>
    innerHTML //markup
    innerText //output text
    style.<cssProperty> //css:hyphen-property ‚Üí js:camelCase
   ‚ñ¨methods
    ‚Ä¢access: singleElement|collection[index]
      $() //in-jQuery === document.querySelectorAll()
      querySelectorAll('s1, ‚Ä¶', ‚Ä¶)
      querySelector('selector')
      getElementById('id') //return 1el
      getElementsByClassName('c1 c2 ‚Ä¶') //els share same classes
      getElementsByTagName('tag') //return all <tag> els
    ‚Ä¢manipulate
      createElement('tag') //saved in memory until we add it
      createTextNode('text') //saved in memory until we add it
      n.cloneNode(boolean)//return copy of node & its subTree?
        //sync issue: .before?after?insertBefore?insertAfter?replaceChild()
      appendChild(node) //#move node‚Üí other parent as last-child
      insertBefore(newNode, previosChild)//move node‚Üías sibling
      insertAfter(newNode, previosNode)//move node‚Üías sibling
      before(n1,‚Ä¶) //p.before(h1, hr)
      after(n1,‚Ä¶) //h1.after(hr, p)
      replaceChild(newNode, previosNode)
        //div[0].replaceChild(newText, paragraph[0]);
      removeChild(node) //div[0].removeChild(paragraph[1]);
    ‚Ä¢att: getAttribute('att') setAttribute('att', 'value')
  ‚ñ∫event listener: n.addEventListener('event',l,boolean?option)‚úì
    |<el onevent=l()> ‚úñ| node.onevent=l ‚úñ|
    ‚ñ¨on|event:
     ‚Ä¢window: ¬ªdesktop: on|mousemove, mouseovee, mouseout
      ¬ªgeneral:DOMContentLoaded, devicemotion, deviceorientation
        ‚Ä∫on| focus, blur, load, beforeunload, unload, error, pagehide, pageshow, resize, copy, cut, paste, offline, online, hashchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
     ‚Ä¢document: ¬ªm: on|touchend,touchcancel,touchmove,touchstart
      ¬ªgeneral: on|click, dblclick, scroll, input, change, visibilitychange, copy, cut, paste, selectstart, selectionchange, transitionstart, transitionrun, transitionend, transitioncancel, animationstart, animationiteration, animationend, animationcancel, 
      ¬ªdesktop: DOMContentLoaded, readystatechange
        ‚Ä∫on|wheel, drag, dragend, dragenter, dragleave, dragover, drop, fullscreenchange, fullscreenerror, keyup, keydown, keypress(removed)
    ‚ñ¨listener(eventHandler):funcName| function(){/*anonymous*/}|
      ()=>{}| (function(){/*temporary scope*/})()
    ‚Ä¢boolean: run|stop listener
    ‚Ä¢options: {
      once: boolean, //call .removeEventListener() after 1listen
      capture: boolean, //??
      passive: boolean, //??
     }
  ‚ñ∫native functions: window.func()
    ‚ñ¨dialog box(show message): ‚Ä¢prompt(req)//[input],(ok)submit
      ‚Ä¢alert(m)//(ok) ‚Ä¢confirm(question)//(ok)true|(cancle)false
    ‚ñ¨return val: ‚Ä¢Date()//date time day GMT
      ‚Ä¢setTimeout(funcName, #'ms) //delay calling funcName()
  ‚ñ∫literal
    ‚ñ¨number:
      n.toFixed(+#) // round n.10^#
      (#).toString() //'#'
    ‚ñ¨string:
      str[i]//character nth i+1
      str.length//#
      Number(√ò?''|'#'|'‚â†#')//0|#|NaN
      parseInt('#'|√ò?''?'‚â†#')//#|NaN
      str.includes?startsWith?endsWith(subStr)//boolean
      str.indexOf(subStr, from=0)//#,-1
      str.slice(start=0,end=str.length)//str‚íπ,'str[s]‚Ä¶str[e-1]'
      str.toLowerCase?toUpperCase()//string
      str.replace?replaceAll(subStr,newSubStr)//string
      str.split(separator,limit?)//[array]
        'a/b/c'.split('/',2) //['a','b']
    ‚ñ¨array:
      arr[i][i] //item nth i+1 of nested arr nth i+1
      arr.indexOf(item)//+#,-1
      arr.push(i,‚Ä¶?)//#(arr.length + [i,‚Ä¶?].length), add‚Üíend.
      arr.unshift(i,‚Ä¶?)//#(new.length), add‚Üístart.
      [‚Ä¶,last].pop()//last, remove last item.
      [first,‚Ä¶].shift()//first, remove first item.
      arr.splice(start=0,count)//[]‚íπ,[arr[s],‚Ä¶],remove [arr[s]‚Ä¶]
      arr.map(fN) //({ newArr:[], m:function(){
          for (const i of arr){this.newArr.push(fN(i))}
          return this.newArr} }).m()
        function x2(i){return i*2}; [1,3,5].map(x2) //[2,6,10]
      arr.filter(fN'condition)//[matchedItems‚Ä¶]
        //({ newArr:[], m:function(){
          for (const i of arr){if(fN(i)){this.newArr.push(i)}}
          return this.newArr} }).m()
        [0,'1',2,'3'].filter(i=>typeof(i)=='number') //[0,2]
        ['ccc','a','bb'].filter(i=>i.length>=2) //['ccc','bb']
      arr.toString() //'arr[0],‚Ä¶,arr[arr.length-1]'
      arr.join(separator=',') //'arr[0],‚Ä¶,arr[arr.length-1]'
‚òÖstatements:
  ‚ñ∫??
    ‚ñ¨typeof <expression> //number|string|object
  ‚ñ∫operators: order: ! ¬±unary,*%/,+-,<=>,== !=,&&,||,?:
    ‚ñ¨numeric:+add -subtract *multi /divid %reminder **exponent
      ‚Ä¢increment++ decrement-- by 1.
      ‚Ä¢assignment: varName =|+=|-=|*=|/=|%=|**=|‚Ä¶ value
    ‚ñ¨comparison:===identical'val&type ==equality !== != <=>'#
    ‚ñ¨logical: !(not) &&(and) ||(or)
      ‚Ä¢!exp//oppsite-boolean notT=F notF=T !0=T !NaN=T !1=F ‚Ä¶
      ‚Ä¢exp&&exp//TandT=true,false ‚Ä¢exp||exp//ForF=false,true
    ‚ñ¨string: +|+=concatecation str+str?n//string
    ‚ñ¨ternary: (condition) ? /*if true run this*/ : /*else this*/
  ‚ñ∫variable: store reusabel data.
    ‚ñ¨dec&init: const?let name=value,‚Ä¶?;
     ‚Ä¢declaring: const?let name1,‚Ä¶?; ‚ñ¨initializing: name=update;
       ‚Ä∫let declare updatable var, const declare ‚â†updatable var.
       ‚Ä∫const array=[‚Ä¶],object={‚Ä¶}; //content ‚Ä¶ can be updated!.
    ‚ñ¨name: [‚â†0~9][a~Z 0~9 _]‚Ä¶?, case-sensitive, ‚â†js-statement.
    ‚ñ¨scope: ‚Ä¢topLvl: const?let golbal=v; //available everywhere
      ‚Ä¢in function:
        ‚Ä∫const?let local=v; //accessed only in this func.
        ‚Ä∫global=v; //call it will declare global var, undifined
          //issue: unexpected errors, fix: avoid this method.
      ‚Ä¢IIFE: Immediately Invoked Functional Expression
        (function(){local=v}()) //func isolation, local scope
  ‚ñ∫function name(arguments)
      { /*code block*/; return expression; /*ignored*/ }
      fName(input-args); //call the function
    ‚ñ¨scope: ‚Ä¢global: function(){};
      ‚Ä¢temporary: (function(){})();
    ‚ñ¨argumets: optional if arg=initialized, can be comma list
    ‚ñ¨block: can contain variables, loops, functions, ?
    ‚ñ¨return keyword:
      ‚Ä¢stop executing, & ignored below code.
      ‚Ä¢give the fonction ability to be a variable with dynamic value (can be customized by arguments).
      ‚Ä¢if 'return' omitted, return undefined
  ‚ñ∫
  ‚ñ∫flow control:
    ‚ñ¨if(condition1 met){ //execute block1
        }else if(condition2 met) { //execute block2
        }‚Ä¶else{ //execute last-block}
      ‚Ä¢condition: boolean|operator == != === !== <=>|method|func
        true !false anyVal|false !true NaN''null0undifined
      ‚Ä¢block can contain 'return', nest other if statement.
    ‚ñ¨switch(<choice>'exp) { case <choice1>: /*code1*/; break
                            case <choice2>: /*code2*/; break ‚Ä¶
                            default?: //code }
    ‚ñ¨for:
      for(dec&init,condition,operator){‚Ä¶}
        for (const i=0; i<arr.length; i++){//‚Ä¶arr[i]‚Ä¶}
      for(declare arg of arr){‚Ä¶}
        for (const i of arr){console.log(i)}
      ‚Ä¢scope issue: nested funcs treats vars globally, fix:
        (function(i){return function(){/*temporary vars*/} })(i)
      ‚Ä¢benefits: ‚Ä∫we can apply styles to list of elements.
        ‚Ä∫add|remove|change attributes to each element from long list(like inputes).
        ‚Ä∫creat arrays to build filters of search element & ‚Ä¶
    ‚ñ¨while(condition){/*loop this block*/}
‚òÖ
‚òÖ
‚òÖ
